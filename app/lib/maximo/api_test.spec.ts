/**
 * Maximo RESTful API
 * <br><div><span>For more API details - <a  href=\"https://maximoqa.wmata.com/maximo/oas3/api.html?includeactions=1\"  target=\"_blank\">Click here</a><br><div><span>Maximo JSON API Wikis - <a  href=\"https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/IBM%20Maximo%20Asset%20Management/page/Maximo%20JSON%20API\"  target=\"_blank\">Maximo JSON API Documents</a></span></div><br>
 *
 * OpenAPI spec version: 7.6.1.3-IFIX20240529-1726
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AHMaximoAPIForMeasurepointDefinitionMHMEASUREPOINTApi", () => {
  let instance: api.AHMaximoAPIForMeasurepointDefinitionMHMEASUREPOINTApi
  beforeEach(function() {
    instance = new api.AHMaximoAPIForMeasurepointDefinitionMHMEASUREPOINTApi(config)
  });

  test("osMhmeasurepointGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhmeasurepointGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhmeasurepointIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhmeasurepointIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhmeasurepointIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhmeasurepointIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhmeasurepointIdPost", () => {
    const body: api.RESOURCEMHMEASUREPOINT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmeasurepointIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhmeasurepointPost", () => {
    const body: api.RESOURCEMHMEASUREPOINT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmeasurepointPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ActionDefinitionMXACTIONApi", () => {
  let instance: api.ActionDefinitionMXACTIONApi
  beforeEach(function() {
    instance = new api.ActionDefinitionMXACTIONApi(config)
  });

  test("osMxactionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxactionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxactionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxactionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxactionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxactionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxactionIdPost", () => {
    const body: api.RESOURCEMXACTION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxactionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxactionPost", () => {
    const body: api.RESOURCEMXACTION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxactionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ActiveWorkOrdersForAnAssetMXBIMASSETWOApi", () => {
  let instance: api.ActiveWorkOrdersForAnAssetMXBIMASSETWOApi
  beforeEach(function() {
    instance = new api.ActiveWorkOrdersForAnAssetMXBIMASSETWOApi(config)
  });

  test("osMxbimassetwoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxbimassetwoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxbimassetwoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxbimassetwoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxbimassetwoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxbimassetwoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxbimassetwoIdPost", () => {
    const body: api.RESOURCEMXBIMASSETWO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbimassetwoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxbimassetwoPost", () => {
    const body: api.RESOURCEMXBIMASSETWO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbimassetwoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetAttributesChangeDefinitionPLUSAMXATTRCHANGEApi", () => {
  let instance: api.AssetAttributesChangeDefinitionPLUSAMXATTRCHANGEApi
  beforeEach(function() {
    instance = new api.AssetAttributesChangeDefinitionPLUSAMXATTRCHANGEApi(config)
  });

  test("osPlusamxattrchangeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxattrchangeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxattrchangeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxattrchangeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxattrchangeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxattrchangeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxattrchangeIdPost", () => {
    const body: api.RESOURCEPLUSAMXATTRCHANGE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxattrchangeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxattrchangePost", () => {
    const body: api.RESOURCEPLUSAMXATTRCHANGE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxattrchangePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetAttributesDefinitionPLUSAMXCMATTRApi", () => {
  let instance: api.AssetAttributesDefinitionPLUSAMXCMATTRApi
  beforeEach(function() {
    instance = new api.AssetAttributesDefinitionPLUSAMXCMATTRApi(config)
  });

  test("osPlusamxcmattrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmattrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmattrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcmattrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcmattrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmattrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmattrIdPost", () => {
    const body: api.RESOURCEPLUSAMXCMATTR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmattrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmattrPost", () => {
    const body: api.RESOURCEPLUSAMXCMATTR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmattrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionForInitialLoadingOnlyMHASSETLOADApi", () => {
  let instance: api.AssetDefinitionForInitialLoadingOnlyMHASSETLOADApi
  beforeEach(function() {
    instance = new api.AssetDefinitionForInitialLoadingOnlyMHASSETLOADApi(config)
  });

  test("osMhassetloadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhassetloadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhassetloadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhassetloadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhassetloadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhassetloadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhassetloadIdPost", () => {
    const body: api.RESOURCEMHASSETLOAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhassetloadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhassetloadPost", () => {
    const body: api.RESOURCEMHASSETLOAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhassetloadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionImportExportAssetSpecWTASSETSPECApi", () => {
  let instance: api.AssetDefinitionImportExportAssetSpecWTASSETSPECApi
  beforeEach(function() {
    instance = new api.AssetDefinitionImportExportAssetSpecWTASSETSPECApi(config)
  });

  test("osWtAssetspecGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetspecGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtAssetspecIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtAssetspecIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtAssetspecIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetspecIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtAssetspecIdPost", () => {
    const body: api.RESOURCEWTASSETSPEC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetspecIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtAssetspecPost", () => {
    const body: api.RESOURCEWTASSETSPEC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetspecPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionMHASSETApi", () => {
  let instance: api.AssetDefinitionMHASSETApi
  beforeEach(function() {
    instance = new api.AssetDefinitionMHASSETApi(config)
  });

  test("osMhassetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhassetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhassetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhassetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhassetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhassetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhassetIdPost", () => {
    const body: api.RESOURCEMHASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhassetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhassetPost", () => {
    const body: api.RESOURCEMHASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhassetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionMXASSETApi", () => {
  let instance: api.AssetDefinitionMXASSETApi
  beforeEach(function() {
    instance = new api.AssetDefinitionMXASSETApi(config)
  });

  test("osMxassetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxassetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxassetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxassetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxassetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxassetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxassetIdPost", () => {
    const body: api.RESOURCEMXASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxassetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxassetPost", () => {
    const body: api.RESOURCEMXASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxassetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionPLUSAMXASSETApi", () => {
  let instance: api.AssetDefinitionPLUSAMXASSETApi
  beforeEach(function() {
    instance = new api.AssetDefinitionPLUSAMXASSETApi(config)
  });

  test("osPlusamxassetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxassetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxassetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxassetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxassetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxassetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxassetIdPost", () => {
    const body: api.RESOURCEPLUSAMXASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxassetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxassetPost", () => {
    const body: api.RESOURCEPLUSAMXASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxassetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionWTASSETApi", () => {
  let instance: api.AssetDefinitionWTASSETApi
  beforeEach(function() {
    instance = new api.AssetDefinitionWTASSETApi(config)
  });

  test("osWtAssetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtAssetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtAssetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtAssetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtAssetIdPost", () => {
    const body: api.RESOURCEWTASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtAssetPost", () => {
    const body: api.RESOURCEWTASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetDefinitionWTASSETALIASApi", () => {
  let instance: api.AssetDefinitionWTASSETALIASApi
  beforeEach(function() {
    instance = new api.AssetDefinitionWTASSETALIASApi(config)
  });

  test("osWtAssetaliasGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetaliasGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtAssetaliasIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtAssetaliasIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtAssetaliasIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetaliasIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtAssetaliasIdPost", () => {
    const body: api.RESOURCEWTASSETALIAS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetaliasIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtAssetaliasPost", () => {
    const body: api.RESOURCEWTASSETALIAS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetaliasPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetMeterMXASSETMETERApi", () => {
  let instance: api.AssetMeterMXASSETMETERApi
  beforeEach(function() {
    instance = new api.AssetMeterMXASSETMETERApi(config)
  });

  test("osMxassetmeterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxassetmeterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxassetmeterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxassetmeterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxassetmeterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxassetmeterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxassetmeterIdPost", () => {
    const body: api.RESOURCEMXASSETMETER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxassetmeterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxassetmeterPost", () => {
    const body: api.RESOURCEMXASSETMETER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxassetmeterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetWithSparePartsMXAPIASSETSPAREApi", () => {
  let instance: api.AssetWithSparePartsMXAPIASSETSPAREApi
  beforeEach(function() {
    instance = new api.AssetWithSparePartsMXAPIASSETSPAREApi(config)
  });

  test("osMxapiassetspareGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetspareGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetspareIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiassetspareIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiassetspareIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetspareIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetspareIdPost", () => {
    const body: api.RESOURCEMXAPIASSETSPARE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetspareIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetsparePost", () => {
    const body: api.RESOURCEMXAPIASSETSPARE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetsparePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetsSparePartsMxLoaderMXLASSETSPApi", () => {
  let instance: api.AssetsSparePartsMxLoaderMXLASSETSPApi
  beforeEach(function() {
    instance = new api.AssetsSparePartsMxLoaderMXLASSETSPApi(config)
  });

  test("osMxlAssetspGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlAssetspGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlAssetspIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlAssetspIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlAssetspIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlAssetspIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlAssetspIdPost", () => {
    const body: api.RESOURCEMXLASSETSP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlAssetspIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlAssetspPost", () => {
    const body: api.RESOURCEMXLASSETSP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlAssetspPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("AssetsVTreeDefinitionPLUSAMXSAONOFFApi", () => {
  let instance: api.AssetsVTreeDefinitionPLUSAMXSAONOFFApi
  beforeEach(function() {
    instance = new api.AssetsVTreeDefinitionPLUSAMXSAONOFFApi(config)
  });

  test("osPlusamxsaonoffGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxsaonoffGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxsaonoffIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxsaonoffIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxsaonoffIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxsaonoffIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxsaonoffIdPost", () => {
    const body: api.RESOURCEPLUSAMXSAONOFF = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxsaonoffIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxsaonoffPost", () => {
    const body: api.RESOURCEPLUSAMXSAONOFF = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxsaonoffPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("BIMImportExportMXBIMPROJECTApi", () => {
  let instance: api.BIMImportExportMXBIMPROJECTApi
  beforeEach(function() {
    instance = new api.BIMImportExportMXBIMPROJECTApi(config)
  });

  test("osMxbimprojectGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxbimprojectGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxbimprojectIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxbimprojectIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxbimprojectIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxbimprojectIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxbimprojectIdPost", () => {
    const body: api.RESOURCEMXBIMPROJECT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbimprojectIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxbimprojectPost", () => {
    const body: api.RESOURCEMXBIMPROJECT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbimprojectPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("BudgetDefinitionForExcelExportimportMXBUDGETApi", () => {
  let instance: api.BudgetDefinitionForExcelExportimportMXBUDGETApi
  beforeEach(function() {
    instance = new api.BudgetDefinitionForExcelExportimportMXBUDGETApi(config)
  });

  test("osMxbudgetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxbudgetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxbudgetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxbudgetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxbudgetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxbudgetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxbudgetIdPost", () => {
    const body: api.RESOURCEMXBUDGET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbudgetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxbudgetPost", () => {
    const body: api.RESOURCEMXBUDGET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbudgetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CIDefinitionMXAUTHCIApi", () => {
  let instance: api.CIDefinitionMXAUTHCIApi
  beforeEach(function() {
    instance = new api.CIDefinitionMXAUTHCIApi(config)
  });

  test("osMxauthciGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxauthciGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxauthciIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxauthciIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxauthciIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxauthciIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxauthciIdPost", () => {
    const body: api.RESOURCEMXAUTHCI = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxauthciIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxauthciPost", () => {
    const body: api.RESOURCEMXAUTHCI = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxauthciPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CalendarsAndWorkPeriodsMxLoaderMXLCALWPApi", () => {
  let instance: api.CalendarsAndWorkPeriodsMxLoaderMXLCALWPApi
  beforeEach(function() {
    instance = new api.CalendarsAndWorkPeriodsMxLoaderMXLCALWPApi(config)
  });

  test("osMxlCalwpGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlCalwpGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlCalwpIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlCalwpIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlCalwpIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlCalwpIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlCalwpIdPost", () => {
    const body: api.RESOURCEMXLCALWP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCalwpIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlCalwpPost", () => {
    const body: api.RESOURCEMXLCALWP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCalwpPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CapabilityDefinitionPLUSAMXCAPABApi", () => {
  let instance: api.CapabilityDefinitionPLUSAMXCAPABApi
  beforeEach(function() {
    instance = new api.CapabilityDefinitionPLUSAMXCAPABApi(config)
  });

  test("osPlusamxcapabGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcapabGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcapabIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcapabIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcapabIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcapabIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcapabIdPost", () => {
    const body: api.RESOURCEPLUSAMXCAPAB = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcapabIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcapabPost", () => {
    const body: api.RESOURCEPLUSAMXCAPAB = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcapabPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CarsOutOfServiceSOADefinitionWTCARSOSSOAApi", () => {
  let instance: api.CarsOutOfServiceSOADefinitionWTCARSOSSOAApi
  beforeEach(function() {
    instance = new api.CarsOutOfServiceSOADefinitionWTCARSOSSOAApi(config)
  });

  test("osWtCarsOsSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtCarsOsSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtCarsOsSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtCarsOsSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtCarsOsSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtCarsOsSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtCarsOsSoaIdPost", () => {
    const body: api.RESOURCEWTCARSOSSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCarsOsSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtCarsOsSoaPost", () => {
    const body: api.RESOURCEWTCARSOSSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCarsOsSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("Class400FastPickToMaximoCountbookWTCOUNTBOOKINApi", () => {
  let instance: api.Class400FastPickToMaximoCountbookWTCOUNTBOOKINApi
  beforeEach(function() {
    instance = new api.Class400FastPickToMaximoCountbookWTCOUNTBOOKINApi(config)
  });

  test("osWtCountbookinGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtCountbookinGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtCountbookinIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtCountbookinIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtCountbookinIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtCountbookinIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtCountbookinIdPost", () => {
    const body: api.RESOURCEWTCOUNTBOOKIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCountbookinIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtCountbookinPost", () => {
    const body: api.RESOURCEWTCOUNTBOOKIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCountbookinPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ClassificationDefinitionMXCLASSIFICATIONApi", () => {
  let instance: api.ClassificationDefinitionMXCLASSIFICATIONApi
  beforeEach(function() {
    instance = new api.ClassificationDefinitionMXCLASSIFICATIONApi(config)
  });

  test("osMxclassificationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxclassificationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxclassificationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxclassificationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxclassificationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxclassificationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxclassificationIdPost", () => {
    const body: api.RESOURCEMXCLASSIFICATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxclassificationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxclassificationPost", () => {
    const body: api.RESOURCEMXCLASSIFICATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxclassificationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ClassstructureDefinitionMHCLASSSTRUCTUREApi", () => {
  let instance: api.ClassstructureDefinitionMHCLASSSTRUCTUREApi
  beforeEach(function() {
    instance = new api.ClassstructureDefinitionMHCLASSSTRUCTUREApi(config)
  });

  test("osMhclassstructureGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhclassstructureGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhclassstructureIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhclassstructureIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhclassstructureIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhclassstructureIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhclassstructureIdPost", () => {
    const body: api.RESOURCEMHCLASSSTRUCTURE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhclassstructureIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhclassstructurePost", () => {
    const body: api.RESOURCEMHCLASSSTRUCTURE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhclassstructurePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ClassstructureDefinitionMXAPICLASSSTRUCTUREApi", () => {
  let instance: api.ClassstructureDefinitionMXAPICLASSSTRUCTUREApi
  beforeEach(function() {
    instance = new api.ClassstructureDefinitionMXAPICLASSSTRUCTUREApi(config)
  });

  test("osMxapiclassstructureGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiclassstructureGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiclassstructureIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiclassstructureIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiclassstructureIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiclassstructureIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiclassstructureIdPost", () => {
    const body: api.RESOURCEMXAPICLASSSTRUCTURE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiclassstructureIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiclassstructurePost", () => {
    const body: api.RESOURCEMXAPICLASSSTRUCTURE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiclassstructurePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CleverSRInboundWTCLEVERSRINApi", () => {
  let instance: api.CleverSRInboundWTCLEVERSRINApi
  beforeEach(function() {
    instance = new api.CleverSRInboundWTCLEVERSRINApi(config)
  });

  test("osWtCleverSrinGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtCleverSrinGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtCleverSrinIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtCleverSrinIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtCleverSrinIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtCleverSrinIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtCleverSrinIdPost", () => {
    const body: api.RESOURCEWTCLEVERSRIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCleverSrinIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtCleverSrinPost", () => {
    const body: api.RESOURCEWTCLEVERSRIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCleverSrinPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CollectionAuthorizationDefinitionMXAPICOLLECTAUTHApi", () => {
  let instance: api.CollectionAuthorizationDefinitionMXAPICOLLECTAUTHApi
  beforeEach(function() {
    instance = new api.CollectionAuthorizationDefinitionMXAPICOLLECTAUTHApi(config)
  });

  test("osMxapicollectauthGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicollectauthGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicollectauthIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicollectauthIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicollectauthIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicollectauthIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicollectauthIdPost", () => {
    const body: api.RESOURCEMXAPICOLLECTAUTH = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicollectauthIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicollectauthPost", () => {
    const body: api.RESOURCEMXAPICOLLECTAUTH = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicollectauthPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CollectionAuthorizationDefinitionMXCOLLECTAUTHApi", () => {
  let instance: api.CollectionAuthorizationDefinitionMXCOLLECTAUTHApi
  beforeEach(function() {
    instance = new api.CollectionAuthorizationDefinitionMXCOLLECTAUTHApi(config)
  });

  test("osMxcollectauthGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxcollectauthGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxcollectauthIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxcollectauthIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxcollectauthIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxcollectauthIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxcollectauthIdPost", () => {
    const body: api.RESOURCEMXCOLLECTAUTH = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcollectauthIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxcollectauthPost", () => {
    const body: api.RESOURCEMXCOLLECTAUTH = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcollectauthPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CollectionDefinitionMXCOLLECTIONApi", () => {
  let instance: api.CollectionDefinitionMXCOLLECTIONApi
  beforeEach(function() {
    instance = new api.CollectionDefinitionMXCOLLECTIONApi(config)
  });

  test("osMxcollectionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxcollectionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxcollectionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxcollectionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxcollectionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxcollectionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxcollectionIdPost", () => {
    const body: api.RESOURCEMXCOLLECTION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcollectionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxcollectionPost", () => {
    const body: api.RESOURCEMXCOLLECTION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcollectionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CommTemplateDefinitionMXCTEMPLATEApi", () => {
  let instance: api.CommTemplateDefinitionMXCTEMPLATEApi
  beforeEach(function() {
    instance = new api.CommTemplateDefinitionMXCTEMPLATEApi(config)
  });

  test("osMxctemplateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxctemplateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxctemplateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxctemplateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxctemplateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxctemplateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxctemplateIdPost", () => {
    const body: api.RESOURCEMXCTEMPLATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxctemplateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxctemplatePost", () => {
    const body: api.RESOURCEMXCTEMPLATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxctemplatePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CommoditiesMxLoaderMXLCOMMODITIESApi", () => {
  let instance: api.CommoditiesMxLoaderMXLCOMMODITIESApi
  beforeEach(function() {
    instance = new api.CommoditiesMxLoaderMXLCOMMODITIESApi(config)
  });

  test("osMxlCommoditiesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlCommoditiesGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlCommoditiesIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlCommoditiesIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlCommoditiesIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlCommoditiesIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlCommoditiesIdPost", () => {
    const body: api.RESOURCEMXLCOMMODITIES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCommoditiesIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlCommoditiesPost", () => {
    const body: api.RESOURCEMXLCOMMODITIES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCommoditiesPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CompaniesDefinitionMXVENDORApi", () => {
  let instance: api.CompaniesDefinitionMXVENDORApi
  beforeEach(function() {
    instance = new api.CompaniesDefinitionMXVENDORApi(config)
  });

  test("osMxvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxvendorIdPost", () => {
    const body: api.RESOURCEMXVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxvendorPost", () => {
    const body: api.RESOURCEMXVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CompaniesDefinitionPLUSAMXCOMPANYApi", () => {
  let instance: api.CompaniesDefinitionPLUSAMXCOMPANYApi
  beforeEach(function() {
    instance = new api.CompaniesDefinitionPLUSAMXCOMPANYApi(config)
  });

  test("osPlusamxcompanyGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcompanyGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcompanyIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcompanyIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcompanyIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcompanyIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcompanyIdPost", () => {
    const body: api.RESOURCEPLUSAMXCOMPANY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcompanyIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcompanyPost", () => {
    const body: api.RESOURCEPLUSAMXCOMPANY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcompanyPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CompaniesMxLoaderMXLCOMPANIESApi", () => {
  let instance: api.CompaniesMxLoaderMXLCOMPANIESApi
  beforeEach(function() {
    instance = new api.CompaniesMxLoaderMXLCOMPANIESApi(config)
  });

  test("osMxlCompaniesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlCompaniesGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlCompaniesIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlCompaniesIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlCompaniesIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlCompaniesIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlCompaniesIdPost", () => {
    const body: api.RESOURCEMXLCOMPANIES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCompaniesIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlCompaniesPost", () => {
    const body: api.RESOURCEMXLCOMPANIES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCompaniesPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CompanyMasterDefinitionMXVENDORMSTRApi", () => {
  let instance: api.CompanyMasterDefinitionMXVENDORMSTRApi
  beforeEach(function() {
    instance = new api.CompanyMasterDefinitionMXVENDORMSTRApi(config)
  });

  test("osMxvendormstrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxvendormstrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxvendormstrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxvendormstrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxvendormstrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxvendormstrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxvendormstrIdPost", () => {
    const body: api.RESOURCEMXVENDORMSTR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxvendormstrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxvendormstrPost", () => {
    const body: api.RESOURCEMXVENDORMSTR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxvendormstrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CompanyMasterDefinitionPLUSAMXCOMPMASApi", () => {
  let instance: api.CompanyMasterDefinitionPLUSAMXCOMPMASApi
  beforeEach(function() {
    instance = new api.CompanyMasterDefinitionPLUSAMXCOMPMASApi(config)
  });

  test("osPlusamxcompmasGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcompmasGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcompmasIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcompmasIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcompmasIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcompmasIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcompmasIdPost", () => {
    const body: api.RESOURCEPLUSAMXCOMPMAS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcompmasIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcompmasPost", () => {
    const body: api.RESOURCEPLUSAMXCOMPMAS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcompmasPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ComponentCodeSOADefinitionWTPLUSTCOMPSOAApi", () => {
  let instance: api.ComponentCodeSOADefinitionWTPLUSTCOMPSOAApi
  beforeEach(function() {
    instance = new api.ComponentCodeSOADefinitionWTPLUSTCOMPSOAApi(config)
  });

  test("osWtPlustcompSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtPlustcompSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtPlustcompSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtPlustcompSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtPlustcompSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtPlustcompSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtPlustcompSoaIdPost", () => {
    const body: api.RESOURCEWTPLUSTCOMPSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtPlustcompSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtPlustcompSoaPost", () => {
    const body: api.RESOURCEWTPLUSTCOMPSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtPlustcompSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ConfigurationManagedCMDomainValueListDefinitionPLUSAMXCMDVLApi", () => {
  let instance: api.ConfigurationManagedCMDomainValueListDefinitionPLUSAMXCMDVLApi
  beforeEach(function() {
    instance = new api.ConfigurationManagedCMDomainValueListDefinitionPLUSAMXCMDVLApi(config)
  });

  test("osPlusamxcmdvlGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmdvlGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmdvlIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcmdvlIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcmdvlIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmdvlIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmdvlIdPost", () => {
    const body: api.RESOURCEPLUSAMXCMDVL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmdvlIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmdvlPost", () => {
    const body: api.RESOURCEPLUSAMXCMDVL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmdvlPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ConfigurationManagedCMItemDefinitionPLUSAMXCMITEMApi", () => {
  let instance: api.ConfigurationManagedCMItemDefinitionPLUSAMXCMITEMApi
  beforeEach(function() {
    instance = new api.ConfigurationManagedCMItemDefinitionPLUSAMXCMITEMApi(config)
  });

  test("osPlusamxcmitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcmitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcmitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmitemIdPost", () => {
    const body: api.RESOURCEPLUSAMXCMITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmitemPost", () => {
    const body: api.RESOURCEPLUSAMXCMITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ConversionFactorsMxLoaderMXLCONVERSIONApi", () => {
  let instance: api.ConversionFactorsMxLoaderMXLCONVERSIONApi
  beforeEach(function() {
    instance = new api.ConversionFactorsMxLoaderMXLCONVERSIONApi(config)
  });

  test("osMxlConversionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlConversionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlConversionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlConversionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlConversionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlConversionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlConversionIdPost", () => {
    const body: api.RESOURCEMXLCONVERSION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlConversionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlConversionPost", () => {
    const body: api.RESOURCEMXLCONVERSION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlConversionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CountBookTo400FastPickWTCOUNTBOOKOUTApi", () => {
  let instance: api.CountBookTo400FastPickWTCOUNTBOOKOUTApi
  beforeEach(function() {
    instance = new api.CountBookTo400FastPickWTCOUNTBOOKOUTApi(config)
  });

  test("osWtCountbookoutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtCountbookoutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtCountbookoutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtCountbookoutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtCountbookoutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtCountbookoutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtCountbookoutIdPost", () => {
    const body: api.RESOURCEWTCOUNTBOOKOUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCountbookoutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtCountbookoutPost", () => {
    const body: api.RESOURCEWTCOUNTBOOKOUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCountbookoutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CraftDefinitionMXCRAFTApi", () => {
  let instance: api.CraftDefinitionMXCRAFTApi
  beforeEach(function() {
    instance = new api.CraftDefinitionMXCRAFTApi(config)
  });

  test("osMxcraftGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxcraftGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxcraftIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxcraftIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxcraftIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxcraftIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxcraftIdPost", () => {
    const body: api.RESOURCEMXCRAFT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcraftIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxcraftPost", () => {
    const body: api.RESOURCEMXCRAFT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcraftPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CrewTypesMXAMCREWTApi", () => {
  let instance: api.CrewTypesMXAMCREWTApi
  beforeEach(function() {
    instance = new api.CrewTypesMXAMCREWTApi(config)
  });

  test("osMxamcrewtGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxamcrewtGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxamcrewtIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxamcrewtIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxamcrewtIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxamcrewtIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxamcrewtIdPost", () => {
    const body: api.RESOURCEMXAMCREWT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxamcrewtIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxamcrewtPost", () => {
    const body: api.RESOURCEMXAMCREWT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxamcrewtPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CrewsMXAMCREWApi", () => {
  let instance: api.CrewsMXAMCREWApi
  beforeEach(function() {
    instance = new api.CrewsMXAMCREWApi(config)
  });

  test("osMxamcrewGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxamcrewGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxamcrewIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxamcrewIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxamcrewIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxamcrewIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxamcrewIdPost", () => {
    const body: api.RESOURCEMXAMCREW = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxamcrewIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxamcrewPost", () => {
    const body: api.RESOURCEMXAMCREW = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxamcrewPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("CurrenciesMxLoaderMXLCURRENCYApi", () => {
  let instance: api.CurrenciesMxLoaderMXLCURRENCYApi
  beforeEach(function() {
    instance = new api.CurrenciesMxLoaderMXLCURRENCYApi(config)
  });

  test("osMxlCurrencyGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlCurrencyGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlCurrencyIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlCurrencyIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlCurrencyIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlCurrencyIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlCurrencyIdPost", () => {
    const body: api.RESOURCEMXLCURRENCY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCurrencyIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlCurrencyPost", () => {
    const body: api.RESOURCEMXLCURRENCY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlCurrencyPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("EAMToHealthForStoreroomMeasureUnitMHMEASUREUNITApi", () => {
  let instance: api.EAMToHealthForStoreroomMeasureUnitMHMEASUREUNITApi
  beforeEach(function() {
    instance = new api.EAMToHealthForStoreroomMeasureUnitMHMEASUREUNITApi(config)
  });

  test("osMhmeasureunitGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhmeasureunitGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhmeasureunitIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhmeasureunitIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhmeasureunitIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhmeasureunitIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhmeasureunitIdPost", () => {
    const body: api.RESOURCEMHMEASUREUNIT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmeasureunitIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhmeasureunitPost", () => {
    const body: api.RESOURCEMHMEASUREUNIT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmeasureunitPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("EAMToHealthMeterDataMHMETERApi", () => {
  let instance: api.EAMToHealthMeterDataMHMETERApi
  beforeEach(function() {
    instance = new api.EAMToHealthMeterDataMHMETERApi(config)
  });

  test("osMhmeterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhmeterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhmeterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhmeterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhmeterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhmeterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhmeterIdPost", () => {
    const body: api.RESOURCEMHMETER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmeterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhmeterPost", () => {
    const body: api.RESOURCEMHMETER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmeterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("EAMToHealthMeterGroupDataMHMETERGROUPApi", () => {
  let instance: api.EAMToHealthMeterGroupDataMHMETERGROUPApi
  beforeEach(function() {
    instance = new api.EAMToHealthMeterGroupDataMHMETERGROUPApi(config)
  });

  test("osMhmetergroupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhmetergroupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhmetergroupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhmetergroupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhmetergroupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhmetergroupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhmetergroupIdPost", () => {
    const body: api.RESOURCEMHMETERGROUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmetergroupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhmetergroupPost", () => {
    const body: api.RESOURCEMHMETERGROUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhmetergroupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("EAMToHealthOrganizationAndSiteDefinitionMHORGANIZATIONApi", () => {
  let instance: api.EAMToHealthOrganizationAndSiteDefinitionMHORGANIZATIONApi
  beforeEach(function() {
    instance = new api.EAMToHealthOrganizationAndSiteDefinitionMHORGANIZATIONApi(config)
  });

  test("osMhorganizationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhorganizationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhorganizationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhorganizationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhorganizationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhorganizationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhorganizationIdPost", () => {
    const body: api.RESOURCEMHORGANIZATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhorganizationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhorganizationPost", () => {
    const body: api.RESOURCEMHORGANIZATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhorganizationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("EAMToHealthServiceAddressDataMHSERVICEADDRESSApi", () => {
  let instance: api.EAMToHealthServiceAddressDataMHSERVICEADDRESSApi
  beforeEach(function() {
    instance = new api.EAMToHealthServiceAddressDataMHSERVICEADDRESSApi(config)
  });

  test("osMhserviceaddressGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhserviceaddressGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhserviceaddressIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhserviceaddressIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhserviceaddressIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhserviceaddressIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhserviceaddressIdPost", () => {
    const body: api.RESOURCEMHSERVICEADDRESS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhserviceaddressIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhserviceaddressPost", () => {
    const body: api.RESOURCEMHSERVICEADDRESS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhserviceaddressPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("EventsManagementDefinitionPLUSAMXEVENTApi", () => {
  let instance: api.EventsManagementDefinitionPLUSAMXEVENTApi
  beforeEach(function() {
    instance = new api.EventsManagementDefinitionPLUSAMXEVENTApi(config)
  });

  test("osPlusamxeventGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxeventGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxeventIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxeventIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxeventIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxeventIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxeventIdPost", () => {
    const body: api.RESOURCEPLUSAMXEVENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxeventIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxeventPost", () => {
    const body: api.RESOURCEPLUSAMXEVENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxeventPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ExchangeRatesMxLoaderMXLEXCGRATESApi", () => {
  let instance: api.ExchangeRatesMxLoaderMXLEXCGRATESApi
  beforeEach(function() {
    instance = new api.ExchangeRatesMxLoaderMXLEXCGRATESApi(config)
  });

  test("osMxlExcgratesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlExcgratesGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlExcgratesIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlExcgratesIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlExcgratesIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlExcgratesIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlExcgratesIdPost", () => {
    const body: api.RESOURCEMXLEXCGRATES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlExcgratesIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlExcgratesPost", () => {
    const body: api.RESOURCEMXLEXCGRATES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlExcgratesPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FLightLogBookDefinitionPLUSAMXFLBApi", () => {
  let instance: api.FLightLogBookDefinitionPLUSAMXFLBApi
  beforeEach(function() {
    instance = new api.FLightLogBookDefinitionPLUSAMXFLBApi(config)
  });

  test("osPlusamxflbGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxflbGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxflbIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxflbIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxflbIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxflbIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxflbIdPost", () => {
    const body: api.RESOURCEPLUSAMXFLB = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxflbIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxflbPost", () => {
    const body: api.RESOURCEPLUSAMXFLB = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxflbPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FLightLogBookSetupDefinitionPLUSAMXFLBSETUPApi", () => {
  let instance: api.FLightLogBookSetupDefinitionPLUSAMXFLBSETUPApi
  beforeEach(function() {
    instance = new api.FLightLogBookSetupDefinitionPLUSAMXFLBSETUPApi(config)
  });

  test("osPlusamxflbsetupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxflbsetupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxflbsetupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxflbsetupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxflbsetupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxflbsetupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxflbsetupIdPost", () => {
    const body: api.RESOURCEPLUSAMXFLBSETUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxflbsetupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxflbsetupPost", () => {
    const body: api.RESOURCEPLUSAMXFLBSETUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxflbsetupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FailureCodeSOADefinitionWTFAILURECODESOAApi", () => {
  let instance: api.FailureCodeSOADefinitionWTFAILURECODESOAApi
  beforeEach(function() {
    instance = new api.FailureCodeSOADefinitionWTFAILURECODESOAApi(config)
  });

  test("osWtFailurecodeSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtFailurecodeSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtFailurecodeSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtFailurecodeSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtFailurecodeSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtFailurecodeSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtFailurecodeSoaIdPost", () => {
    const body: api.RESOURCEWTFAILURECODESOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtFailurecodeSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtFailurecodeSoaPost", () => {
    const body: api.RESOURCEWTFAILURECODESOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtFailurecodeSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FailureCodesMxLoaderMXLFAILURECODEApi", () => {
  let instance: api.FailureCodesMxLoaderMXLFAILURECODEApi
  beforeEach(function() {
    instance = new api.FailureCodesMxLoaderMXLFAILURECODEApi(config)
  });

  test("osMxlFailurecodeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlFailurecodeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlFailurecodeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlFailurecodeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlFailurecodeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlFailurecodeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlFailurecodeIdPost", () => {
    const body: api.RESOURCEMXLFAILURECODE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlFailurecodeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlFailurecodePost", () => {
    const body: api.RESOURCEMXLFAILURECODE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlFailurecodePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FailureHierarchyMxLoaderMXLFAILURELISTApi", () => {
  let instance: api.FailureHierarchyMxLoaderMXLFAILURELISTApi
  beforeEach(function() {
    instance = new api.FailureHierarchyMxLoaderMXLFAILURELISTApi(config)
  });

  test("osMxlFailurelistGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlFailurelistGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlFailurelistIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlFailurelistIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlFailurelistIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlFailurelistIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlFailurelistIdPost", () => {
    const body: api.RESOURCEMXLFAILURELIST = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlFailurelistIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlFailurelistPost", () => {
    const body: api.RESOURCEMXLFAILURELIST = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlFailurelistPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FailureListSOADefinitionWTFAILURELISTSOAApi", () => {
  let instance: api.FailureListSOADefinitionWTFAILURELISTSOAApi
  beforeEach(function() {
    instance = new api.FailureListSOADefinitionWTFAILURELISTSOAApi(config)
  });

  test("osWtFailurelistSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtFailurelistSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtFailurelistSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtFailurelistSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtFailurelistSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtFailurelistSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtFailurelistSoaIdPost", () => {
    const body: api.RESOURCEWTFAILURELISTSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtFailurelistSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtFailurelistSoaPost", () => {
    const body: api.RESOURCEWTFAILURELISTSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtFailurelistSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FailureListsMHFAILURELISTApi", () => {
  let instance: api.FailureListsMHFAILURELISTApi
  beforeEach(function() {
    instance = new api.FailureListsMHFAILURELISTApi(config)
  });

  test("osMhfailurelistGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhfailurelistGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhfailurelistIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhfailurelistIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhfailurelistIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhfailurelistIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhfailurelistIdPost", () => {
    const body: api.RESOURCEMHFAILURELIST = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhfailurelistIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhfailurelistPost", () => {
    const body: api.RESOURCEMHFAILURELIST = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhfailurelistPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FastPickItemWTITEMApi", () => {
  let instance: api.FastPickItemWTITEMApi
  beforeEach(function() {
    instance = new api.FastPickItemWTITEMApi(config)
  });

  test("osWtItemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtItemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtItemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtItemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtItemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtItemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtItemIdPost", () => {
    const body: api.RESOURCEWTITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtItemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtItemPost", () => {
    const body: api.RESOURCEWTITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtItemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FiltersForCOBieImportProjectsMXBIMFILTERApi", () => {
  let instance: api.FiltersForCOBieImportProjectsMXBIMFILTERApi
  beforeEach(function() {
    instance = new api.FiltersForCOBieImportProjectsMXBIMFILTERApi(config)
  });

  test("osMxbimfilterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxbimfilterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxbimfilterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxbimfilterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxbimfilterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxbimfilterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxbimfilterIdPost", () => {
    const body: api.RESOURCEMXBIMFILTER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbimfilterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxbimfilterPost", () => {
    const body: api.RESOURCEMXBIMFILTER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxbimfilterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FinancialProjectDefinitionMXPROJApi", () => {
  let instance: api.FinancialProjectDefinitionMXPROJApi
  beforeEach(function() {
    instance = new api.FinancialProjectDefinitionMXPROJApi(config)
  });

  test("osMxprojGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxprojGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxprojIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxprojIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxprojIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxprojIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxprojIdPost", () => {
    const body: api.RESOURCEMXPROJ = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxprojIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxprojPost", () => {
    const body: api.RESOURCEMXPROJ = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxprojPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FleetDefinitionPLUSAMXFLEETApi", () => {
  let instance: api.FleetDefinitionPLUSAMXFLEETApi
  beforeEach(function() {
    instance = new api.FleetDefinitionPLUSAMXFLEETApi(config)
  });

  test("osPlusamxfleetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxfleetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetIdPost", () => {
    const body: api.RESOURCEPLUSAMXFLEET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetPost", () => {
    const body: api.RESOURCEPLUSAMXFLEET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("FleetUsageLoadDefinitionPLUSAMXFLEETUTLApi", () => {
  let instance: api.FleetUsageLoadDefinitionPLUSAMXFLEETUTLApi
  beforeEach(function() {
    instance = new api.FleetUsageLoadDefinitionPLUSAMXFLEETUTLApi(config)
  });

  test("osPlusamxfleetutlGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetutlGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetutlIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxfleetutlIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetutlIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetutlIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetutlIdPost", () => {
    const body: api.RESOURCEPLUSAMXFLEETUTL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetutlIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxfleetutlPost", () => {
    const body: api.RESOURCEPLUSAMXFLEETUTL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxfleetutlPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("GLAccountDefinitionMXCOAApi", () => {
  let instance: api.GLAccountDefinitionMXCOAApi
  beforeEach(function() {
    instance = new api.GLAccountDefinitionMXCOAApi(config)
  });

  test("osMxcoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxcoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxcoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxcoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxcoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxcoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxcoaIdPost", () => {
    const body: api.RESOURCEMXCOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxcoaPost", () => {
    const body: api.RESOURCEMXCOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxcoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("GLComponentDefinitionMXGLCOMPApi", () => {
  let instance: api.GLComponentDefinitionMXGLCOMPApi
  beforeEach(function() {
    instance = new api.GLComponentDefinitionMXGLCOMPApi(config)
  });

  test("osMxglcompGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxglcompGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxglcompIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxglcompIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxglcompIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxglcompIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxglcompIdPost", () => {
    const body: api.RESOURCEMXGLCOMP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxglcompIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxglcompPost", () => {
    const body: api.RESOURCEMXGLCOMP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxglcompPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("IncidentDefinitionMXINCIDENTApi", () => {
  let instance: api.IncidentDefinitionMXINCIDENTApi
  beforeEach(function() {
    instance = new api.IncidentDefinitionMXINCIDENTApi(config)
  });

  test("osMxincidentGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxincidentGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxincidentIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxincidentIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxincidentIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxincidentIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxincidentIdPost", () => {
    const body: api.RESOURCEMXINCIDENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxincidentIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxincidentPost", () => {
    const body: api.RESOURCEMXINCIDENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxincidentPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InspectionFormWithInspectionResultsMHINSPECTIONApi", () => {
  let instance: api.InspectionFormWithInspectionResultsMHINSPECTIONApi
  beforeEach(function() {
    instance = new api.InspectionFormWithInspectionResultsMHINSPECTIONApi(config)
  });

  test("osMhinspectionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhinspectionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhinspectionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhinspectionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhinspectionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhinspectionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhinspectionIdPost", () => {
    const body: api.RESOURCEMHINSPECTION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhinspectionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhinspectionPost", () => {
    const body: api.RESOURCEMHINSPECTION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhinspectionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InterfaceToTheEntireINVTRANSTableWTOCFMXINVTRANSApi", () => {
  let instance: api.InterfaceToTheEntireINVTRANSTableWTOCFMXINVTRANSApi
  beforeEach(function() {
    instance = new api.InterfaceToTheEntireINVTRANSTableWTOCFMXINVTRANSApi(config)
  });

  test("osWtOcfMxinvtransGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvtransGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvtransIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxinvtransIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvtransIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvtransIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvtransIdPost", () => {
    const body: api.RESOURCEWTOCFMXINVTRANS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvtransIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvtransPost", () => {
    const body: api.RESOURCEWTOCFMXINVTRANS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvtransPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InterfaceToTheEntireMatrectransTableWTMXMATRECTRANSSTGApi", () => {
  let instance: api.InterfaceToTheEntireMatrectransTableWTMXMATRECTRANSSTGApi
  beforeEach(function() {
    instance = new api.InterfaceToTheEntireMatrectransTableWTMXMATRECTRANSSTGApi(config)
  });

  test("osWtMxmatrectransStgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxmatrectransStgGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxmatrectransStgIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxmatrectransStgIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxmatrectransStgIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxmatrectransStgIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxmatrectransStgIdPost", () => {
    const body: api.RESOURCEWTMXMATRECTRANSSTG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxmatrectransStgIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxmatrectransStgPost", () => {
    const body: api.RESOURCEWTMXMATRECTRANSSTG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxmatrectransStgPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InterfaceToTheEntireMatusetransTableWTMXMATUSETRANSSTGApi", () => {
  let instance: api.InterfaceToTheEntireMatusetransTableWTMXMATUSETRANSSTGApi
  beforeEach(function() {
    instance = new api.InterfaceToTheEntireMatusetransTableWTMXMATUSETRANSSTGApi(config)
  });

  test("osWtMxmatusetransStgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxmatusetransStgGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxmatusetransStgIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxmatusetransStgIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxmatusetransStgIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxmatusetransStgIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxmatusetransStgIdPost", () => {
    const body: api.RESOURCEWTMXMATUSETRANSSTG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxmatusetransStgIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxmatusetransStgPost", () => {
    const body: api.RESOURCEWTMXMATUSETRANSSTG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxmatusetransStgPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InterfaceToTheEntireMatusetransTableWTOCFMXMATUSETRANSApi", () => {
  let instance: api.InterfaceToTheEntireMatusetransTableWTOCFMXMATUSETRANSApi
  beforeEach(function() {
    instance = new api.InterfaceToTheEntireMatusetransTableWTOCFMXMATUSETRANSApi(config)
  });

  test("osWtOcfMxmatusetransGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxmatusetransGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxmatusetransIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxmatusetransIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxmatusetransIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxmatusetransIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxmatusetransIdPost", () => {
    const body: api.RESOURCEWTOCFMXMATUSETRANS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxmatusetransIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxmatusetransPost", () => {
    const body: api.RESOURCEWTOCFMXMATUSETRANS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxmatusetransPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InventoryBalanceDefinitionMXINVBALApi", () => {
  let instance: api.InventoryBalanceDefinitionMXINVBALApi
  beforeEach(function() {
    instance = new api.InventoryBalanceDefinitionMXINVBALApi(config)
  });

  test("osMxinvbalGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinvbalGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinvbalIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinvbalIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinvbalIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinvbalIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinvbalIdPost", () => {
    const body: api.RESOURCEMXINVBAL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvbalIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinvbalPost", () => {
    const body: api.RESOURCEMXINVBAL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvbalPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InventoryCostDefinitionWTINVCOSTApi", () => {
  let instance: api.InventoryCostDefinitionWTINVCOSTApi
  beforeEach(function() {
    instance = new api.InventoryCostDefinitionWTINVCOSTApi(config)
  });

  test("osWtInvcostGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtInvcostGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtInvcostIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtInvcostIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtInvcostIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtInvcostIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtInvcostIdPost", () => {
    const body: api.RESOURCEWTINVCOST = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtInvcostIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtInvcostPost", () => {
    const body: api.RESOURCEWTINVCOST = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtInvcostPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InventoryDefinitionMXINVENTORYApi", () => {
  let instance: api.InventoryDefinitionMXINVENTORYApi
  beforeEach(function() {
    instance = new api.InventoryDefinitionMXINVENTORYApi(config)
  });

  test("osMxinventoryGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinventoryGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinventoryIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinventoryIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinventoryIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinventoryIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinventoryIdPost", () => {
    const body: api.RESOURCEMXINVENTORY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinventoryIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinventoryPost", () => {
    const body: api.RESOURCEMXINVENTORY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinventoryPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InventoryIssueDefinitionMXINVISSUEApi", () => {
  let instance: api.InventoryIssueDefinitionMXINVISSUEApi
  beforeEach(function() {
    instance = new api.InventoryIssueDefinitionMXINVISSUEApi(config)
  });

  test("osMxinvissueGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinvissueGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinvissueIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinvissueIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinvissueIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinvissueIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinvissueIdPost", () => {
    const body: api.RESOURCEMXINVISSUE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvissueIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinvissuePost", () => {
    const body: api.RESOURCEMXINVISSUE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvissuePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InventoryReservationsDefinitionMXINVRESApi", () => {
  let instance: api.InventoryReservationsDefinitionMXINVRESApi
  beforeEach(function() {
    instance = new api.InventoryReservationsDefinitionMXINVRESApi(config)
  });

  test("osMxinvresGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinvresGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinvresIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinvresIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinvresIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinvresIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinvresIdPost", () => {
    const body: api.RESOURCEMXINVRES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvresIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinvresPost", () => {
    const body: api.RESOURCEMXINVRES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvresPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("InvoiceDefinitionMXINVOICEApi", () => {
  let instance: api.InvoiceDefinitionMXINVOICEApi
  beforeEach(function() {
    instance = new api.InvoiceDefinitionMXINVOICEApi(config)
  });

  test("osMxinvoiceGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinvoiceGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinvoiceIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinvoiceIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinvoiceIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinvoiceIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinvoiceIdPost", () => {
    const body: api.RESOURCEMXINVOICE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvoiceIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinvoicePost", () => {
    const body: api.RESOURCEMXINVOICE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvoicePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ItemCommentsLoadWTITEMCOMMENTSApi", () => {
  let instance: api.ItemCommentsLoadWTITEMCOMMENTSApi
  beforeEach(function() {
    instance = new api.ItemCommentsLoadWTITEMCOMMENTSApi(config)
  });

  test("osWtItemCommentsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtItemCommentsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtItemCommentsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtItemCommentsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtItemCommentsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtItemCommentsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtItemCommentsIdPost", () => {
    const body: api.RESOURCEWTITEMCOMMENTS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtItemCommentsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtItemCommentsPost", () => {
    const body: api.RESOURCEWTITEMCOMMENTS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtItemCommentsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ItemCreationFromWindchillWTWCITEMApi", () => {
  let instance: api.ItemCreationFromWindchillWTWCITEMApi
  beforeEach(function() {
    instance = new api.ItemCreationFromWindchillWTWCITEMApi(config)
  });

  test("osWtWcitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWcitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWcitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWcitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWcitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWcitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWcitemIdPost", () => {
    const body: api.RESOURCEWTWCITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWcitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWcitemPost", () => {
    const body: api.RESOURCEWTWCITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWcitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ItemDefinitionMXITEMApi", () => {
  let instance: api.ItemDefinitionMXITEMApi
  beforeEach(function() {
    instance = new api.ItemDefinitionMXITEMApi(config)
  });

  test("osMxitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxitemIdPost", () => {
    const body: api.RESOURCEMXITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxitemPost", () => {
    const body: api.RESOURCEMXITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ItemSOADefinitionWTITEMSOAApi", () => {
  let instance: api.ItemSOADefinitionWTITEMSOAApi
  beforeEach(function() {
    instance = new api.ItemSOADefinitionWTITEMSOAApi(config)
  });

  test("osWtItemSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtItemSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtItemSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtItemSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtItemSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtItemSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtItemSoaIdPost", () => {
    const body: api.RESOURCEWTITEMSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtItemSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtItemSoaPost", () => {
    const body: api.RESOURCEWTITEMSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtItemSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ItemVendorDefinitionMXINVVENDORApi", () => {
  let instance: api.ItemVendorDefinitionMXINVVENDORApi
  beforeEach(function() {
    instance = new api.ItemVendorDefinitionMXINVVENDORApi(config)
  });

  test("osMxinvvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinvvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinvvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinvvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinvvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinvvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinvvendorIdPost", () => {
    const body: api.RESOURCEMXINVVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinvvendorPost", () => {
    const body: api.RESOURCEMXINVVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ItemVendorDefinitionWindChillWTWCINVVENDORApi", () => {
  let instance: api.ItemVendorDefinitionWindChillWTWCINVVENDORApi
  beforeEach(function() {
    instance = new api.ItemVendorDefinitionWindChillWTWCINVVENDORApi(config)
  });

  test("osWtWcinvvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWcinvvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWcinvvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWcinvvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWcinvvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWcinvvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWcinvvendorIdPost", () => {
    const body: api.RESOURCEWTWCINVVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWcinvvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWcinvvendorPost", () => {
    const body: api.RESOURCEWTWCINVVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWcinvvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("JobPlanObjectStructureMHJOBPLANApi", () => {
  let instance: api.JobPlanObjectStructureMHJOBPLANApi
  beforeEach(function() {
    instance = new api.JobPlanObjectStructureMHJOBPLANApi(config)
  });

  test("osMhjobplanGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhjobplanGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhjobplanIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhjobplanIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhjobplanIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhjobplanIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhjobplanIdPost", () => {
    const body: api.RESOURCEMHJOBPLAN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhjobplanIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhjobplanPost", () => {
    const body: api.RESOURCEMHJOBPLAN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhjobplanPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("JobPlansMxLoaderMXLJOBPLANApi", () => {
  let instance: api.JobPlansMxLoaderMXLJOBPLANApi
  beforeEach(function() {
    instance = new api.JobPlansMxLoaderMXLJOBPLANApi(config)
  });

  test("osMxlJobplanGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlJobplanGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlJobplanIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlJobplanIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlJobplanIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlJobplanIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlJobplanIdPost", () => {
    const body: api.RESOURCEMXLJOBPLAN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlJobplanIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlJobplanPost", () => {
    const body: api.RESOURCEMXLJOBPLAN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlJobplanPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("JournalsDefinitionMXGLTXNApi", () => {
  let instance: api.JournalsDefinitionMXGLTXNApi
  beforeEach(function() {
    instance = new api.JournalsDefinitionMXGLTXNApi(config)
  });

  test("osMxgltxnGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxgltxnGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxgltxnIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxgltxnIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxgltxnIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxgltxnIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxgltxnIdPost", () => {
    const body: api.RESOURCEMXGLTXN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxgltxnIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxgltxnPost", () => {
    const body: api.RESOURCEMXGLTXN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxgltxnPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("KPITEMPLATEObjectStructureKPITEMPLATEApi", () => {
  let instance: api.KPITEMPLATEObjectStructureKPITEMPLATEApi
  beforeEach(function() {
    instance = new api.KPITEMPLATEObjectStructureKPITEMPLATEApi(config)
  });

  test("osKpitemplateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osKpitemplateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osKpitemplateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osKpitemplateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osKpitemplateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osKpitemplateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osKpitemplateIdPost", () => {
    const body: api.RESOURCEKPITEMPLATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osKpitemplateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osKpitemplatePost", () => {
    const body: api.RESOURCEKPITEMPLATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osKpitemplatePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LBSLocationMXLBSLOCATIONApi", () => {
  let instance: api.LBSLocationMXLBSLOCATIONApi
  beforeEach(function() {
    instance = new api.LBSLocationMXLBSLOCATIONApi(config)
  });

  test("osMxlbslocationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlbslocationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlbslocationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlbslocationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlbslocationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlbslocationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlbslocationIdPost", () => {
    const body: api.RESOURCEMXLBSLOCATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlbslocationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlbslocationPost", () => {
    const body: api.RESOURCEMXLBSLOCATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlbslocationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LaborDefinitionMXLABORApi", () => {
  let instance: api.LaborDefinitionMXLABORApi
  beforeEach(function() {
    instance = new api.LaborDefinitionMXLABORApi(config)
  });

  test("osMxlaborGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlaborGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlaborIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlaborIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlaborIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlaborIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlaborIdPost", () => {
    const body: api.RESOURCEMXLABOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlaborIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlaborPost", () => {
    const body: api.RESOURCEMXLABOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlaborPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LaborPayDefinitionMXEMPACTApi", () => {
  let instance: api.LaborPayDefinitionMXEMPACTApi
  beforeEach(function() {
    instance = new api.LaborPayDefinitionMXEMPACTApi(config)
  });

  test("osMxempactGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxempactGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxempactIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxempactIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxempactIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxempactIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxempactIdPost", () => {
    const body: api.RESOURCEMXEMPACT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxempactIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxempactPost", () => {
    const body: api.RESOURCEMXEMPACT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxempactPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LocationDefinitionForInitialLoadingOnlyMHOPERLOCLOADApi", () => {
  let instance: api.LocationDefinitionForInitialLoadingOnlyMHOPERLOCLOADApi
  beforeEach(function() {
    instance = new api.LocationDefinitionForInitialLoadingOnlyMHOPERLOCLOADApi(config)
  });

  test("osMhoperlocloadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhoperlocloadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhoperlocloadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhoperlocloadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhoperlocloadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhoperlocloadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhoperlocloadIdPost", () => {
    const body: api.RESOURCEMHOPERLOCLOAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhoperlocloadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhoperlocloadPost", () => {
    const body: api.RESOURCEMHOPERLOCLOAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhoperlocloadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LocationHierarchyMxLoaderMXLLOCATIONApi", () => {
  let instance: api.LocationHierarchyMxLoaderMXLLOCATIONApi
  beforeEach(function() {
    instance = new api.LocationHierarchyMxLoaderMXLLOCATIONApi(config)
  });

  test("osMxlLocationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlLocationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlLocationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlLocationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlLocationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlLocationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlLocationIdPost", () => {
    const body: api.RESOURCEMXLLOCATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlLocationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlLocationPost", () => {
    const body: api.RESOURCEMXLLOCATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlLocationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LocationSystemsDefinitionMHLOCSYSTEMApi", () => {
  let instance: api.LocationSystemsDefinitionMHLOCSYSTEMApi
  beforeEach(function() {
    instance = new api.LocationSystemsDefinitionMHLOCSYSTEMApi(config)
  });

  test("osMhlocsystemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhlocsystemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhlocsystemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhlocsystemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhlocsystemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhlocsystemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhlocsystemIdPost", () => {
    const body: api.RESOURCEMHLOCSYSTEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhlocsystemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhlocsystemPost", () => {
    const body: api.RESOURCEMHLOCSYSTEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhlocsystemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("LogsChangeDefinitionPLUSAMXLOGSApi", () => {
  let instance: api.LogsChangeDefinitionPLUSAMXLOGSApi
  beforeEach(function() {
    instance = new api.LogsChangeDefinitionPLUSAMXLOGSApi(config)
  });

  test("osPlusamxlogsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxlogsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxlogsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxlogsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxlogsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxlogsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxlogsIdPost", () => {
    const body: api.RESOURCEPLUSAMXLOGS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxlogsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxlogsPost", () => {
    const body: api.RESOURCEPLUSAMXLOGS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxlogsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MAXIMO7KITEMPARTSIMPORTWTMX7KPARTSApi", () => {
  let instance: api.MAXIMO7KITEMPARTSIMPORTWTMX7KPARTSApi
  beforeEach(function() {
    instance = new api.MAXIMO7KITEMPARTSIMPORTWTMX7KPARTSApi(config)
  });

  test("osWtMx7kpartsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMx7kpartsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMx7kpartsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMx7kpartsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMx7kpartsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMx7kpartsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMx7kpartsIdPost", () => {
    const body: api.RESOURCEWTMX7KPARTS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMx7kpartsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMx7kpartsPost", () => {
    const body: api.RESOURCEWTMX7KPARTS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMx7kpartsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MEASUREPOINTDEFINITIONWTMEASUREPOINTApi", () => {
  let instance: api.MEASUREPOINTDEFINITIONWTMEASUREPOINTApi
  beforeEach(function() {
    instance = new api.MEASUREPOINTDEFINITIONWTMEASUREPOINTApi(config)
  });

  test("osWtMeasurepointGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMeasurepointGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMeasurepointIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMeasurepointIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMeasurepointIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMeasurepointIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMeasurepointIdPost", () => {
    const body: api.RESOURCEWTMEASUREPOINT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMeasurepointIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMeasurepointPost", () => {
    const body: api.RESOURCEWTMEASUREPOINT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMeasurepointPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("METERMXMETERApi", () => {
  let instance: api.METERMXMETERApi
  beforeEach(function() {
    instance = new api.METERMXMETERApi(config)
  });

  test("osMxmeterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxmeterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxmeterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxmeterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxmeterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxmeterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxmeterIdPost", () => {
    const body: api.RESOURCEMXMETER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxmeterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxmeterPost", () => {
    const body: api.RESOURCEMXMETER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxmeterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MXLAUNCHPOINTApi", () => {
  let instance: api.MXLAUNCHPOINTApi
  beforeEach(function() {
    instance = new api.MXLAUNCHPOINTApi(config)
  });

  test("osMxlaunchpointGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlaunchpointGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlaunchpointIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlaunchpointIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlaunchpointIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlaunchpointIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlaunchpointIdPost", () => {
    const body: api.RESOURCEMXLAUNCHPOINT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlaunchpointIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlaunchpointPost", () => {
    const body: api.RESOURCEMXLAUNCHPOINT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlaunchpointPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MXPMASSETMXPMASSETApi", () => {
  let instance: api.MXPMASSETMXPMASSETApi
  beforeEach(function() {
    instance = new api.MXPMASSETMXPMASSETApi(config)
  });

  test("osMxpmAssetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxpmAssetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxpmAssetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxpmAssetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxpmAssetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxpmAssetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxpmAssetIdPost", () => {
    const body: api.RESOURCEMXPMASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpmAssetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxpmAssetPost", () => {
    const body: api.RESOURCEMXPMASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpmAssetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaintenanceForecastDefinitionPLUSAMXMNTFOApi", () => {
  let instance: api.MaintenanceForecastDefinitionPLUSAMXMNTFOApi
  beforeEach(function() {
    instance = new api.MaintenanceForecastDefinitionPLUSAMXMNTFOApi(config)
  });

  test("osPlusamxmntfoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxmntfoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmntfoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxmntfoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxmntfoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxmntfoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmntfoIdPost", () => {
    const body: api.RESOURCEPLUSAMXMNTFO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxmntfoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmntfoPost", () => {
    const body: api.RESOURCEPLUSAMXMNTFO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxmntfoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MapManagerMXMAPMANApi", () => {
  let instance: api.MapManagerMXMAPMANApi
  beforeEach(function() {
    instance = new api.MapManagerMXMAPMANApi(config)
  });

  test("osMxmapmanGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxmapmanGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxmapmanIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxmapmanIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxmapmanIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxmapmanIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxmapmanIdPost", () => {
    const body: api.RESOURCEMXMAPMAN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxmapmanIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxmapmanPost", () => {
    const body: api.RESOURCEMXMAPMAN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxmapmanPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MasterPreventiveMaintenancePMDefinitionPLUSAMXMASTERPMApi", () => {
  let instance: api.MasterPreventiveMaintenancePMDefinitionPLUSAMXMASTERPMApi
  beforeEach(function() {
    instance = new api.MasterPreventiveMaintenancePMDefinitionPLUSAMXMASTERPMApi(config)
  });

  test("osPlusamxmasterpmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxmasterpmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmasterpmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxmasterpmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxmasterpmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxmasterpmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmasterpmIdPost", () => {
    const body: api.RESOURCEPLUSAMXMASTERPM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxmasterpmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmasterpmPost", () => {
    const body: api.RESOURCEPLUSAMXMASTERPM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxmasterpmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAPIKeysMXAPIAPIKEYApi", () => {
  let instance: api.MaximoAPIForAPIKeysMXAPIAPIKEYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAPIKeysMXAPIAPIKEYApi(config)
  });

  test("osMxapiapikeyGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiapikeyGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiapikeyIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiapikeyIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiapikeyIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiapikeyIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiapikeyIdPost", () => {
    const body: api.RESOURCEMXAPIAPIKEY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiapikeyIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiapikeyPost", () => {
    const body: api.RESOURCEMXAPIAPIKEY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiapikeyPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForActionsMXAPIACTIONApi", () => {
  let instance: api.MaximoAPIForActionsMXAPIACTIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForActionsMXAPIACTIONApi(config)
  });

  test("osMxapiactionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiactionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiactionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiactionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiactionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiactionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiactionIdPost", () => {
    const body: api.RESOURCEMXAPIACTION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiactionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiactionPost", () => {
    const body: api.RESOURCEMXAPIACTION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiactionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAddressMXAPIADDRESSApi", () => {
  let instance: api.MaximoAPIForAddressMXAPIADDRESSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAddressMXAPIADDRESSApi(config)
  });

  test("osMxapiaddressGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiaddressGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiaddressIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiaddressIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiaddressIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiaddressIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiaddressIdPost", () => {
    const body: api.RESOURCEMXAPIADDRESS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiaddressIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiaddressPost", () => {
    const body: api.RESOURCEMXAPIADDRESS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiaddressPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAnalyticsDatasetMXAPIANALYTICDATASETApi", () => {
  let instance: api.MaximoAPIForAnalyticsDatasetMXAPIANALYTICDATASETApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAnalyticsDatasetMXAPIANALYTICDATASETApi(config)
  });

  test("osMxapianalyticdatasetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapianalyticdatasetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapianalyticdatasetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapianalyticdatasetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapianalyticdatasetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapianalyticdatasetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapianalyticdatasetIdPost", () => {
    const body: api.RESOURCEMXAPIANALYTICDATASET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapianalyticdatasetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapianalyticdatasetPost", () => {
    const body: api.RESOURCEMXAPIANALYTICDATASET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapianalyticdatasetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAssetMXAPIASSETApi", () => {
  let instance: api.MaximoAPIForAssetMXAPIASSETApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAssetMXAPIASSETApi(config)
  });

  test("osMxapiassetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiassetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiassetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetIdPost", () => {
    const body: api.RESOURCEMXAPIASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetPost", () => {
    const body: api.RESOURCEMXAPIASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAssetMeterMXAPIASSETMETERApi", () => {
  let instance: api.MaximoAPIForAssetMeterMXAPIASSETMETERApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAssetMeterMXAPIASSETMETERApi(config)
  });

  test("osMxapiassetmeterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetmeterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetmeterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiassetmeterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiassetmeterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetmeterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetmeterIdPost", () => {
    const body: api.RESOURCEMXAPIASSETMETER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetmeterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetmeterPost", () => {
    const body: api.RESOURCEMXAPIASSETMETER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetmeterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAssignmentMXAPIASSIGNMENTApi", () => {
  let instance: api.MaximoAPIForAssignmentMXAPIASSIGNMENTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAssignmentMXAPIASSIGNMENTApi(config)
  });

  test("osMxapiassignmentGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassignmentGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiassignmentIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiassignmentIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiassignmentIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassignmentIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiassignmentIdPost", () => {
    const body: api.RESOURCEMXAPIASSIGNMENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassignmentIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiassignmentPost", () => {
    const body: api.RESOURCEMXAPIASSIGNMENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassignmentPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForAuthorizedCIMXAPIAUTHCIApi", () => {
  let instance: api.MaximoAPIForAuthorizedCIMXAPIAUTHCIApi
  beforeEach(function() {
    instance = new api.MaximoAPIForAuthorizedCIMXAPIAUTHCIApi(config)
  });

  test("osMxapiauthciGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiauthciGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiauthciIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiauthciIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiauthciIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiauthciIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiauthciIdPost", () => {
    const body: api.RESOURCEMXAPIAUTHCI = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiauthciIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiauthciPost", () => {
    const body: api.RESOURCEMXAPIAUTHCI = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiauthciPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForBaselineThresholdsMXAPIAHBLTHRESHOLDApi", () => {
  let instance: api.MaximoAPIForBaselineThresholdsMXAPIAHBLTHRESHOLDApi
  beforeEach(function() {
    instance = new api.MaximoAPIForBaselineThresholdsMXAPIAHBLTHRESHOLDApi(config)
  });

  test("osMxapiahblthresholdGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiahblthresholdGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiahblthresholdIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiahblthresholdIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiahblthresholdIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiahblthresholdIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiahblthresholdIdPost", () => {
    const body: api.RESOURCEMXAPIAHBLTHRESHOLD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiahblthresholdIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiahblthresholdPost", () => {
    const body: api.RESOURCEMXAPIAHBLTHRESHOLD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiahblthresholdPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForBaselineThresholdsRangesMXAPISCORINGRANGEApi", () => {
  let instance: api.MaximoAPIForBaselineThresholdsRangesMXAPISCORINGRANGEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForBaselineThresholdsRangesMXAPISCORINGRANGEApi(config)
  });

  test("osMxapiscoringrangeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiscoringrangeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiscoringrangeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiscoringrangeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiscoringrangeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiscoringrangeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiscoringrangeIdPost", () => {
    const body: api.RESOURCEMXAPISCORINGRANGE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiscoringrangeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiscoringrangePost", () => {
    const body: api.RESOURCEMXAPISCORINGRANGE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiscoringrangePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCLASSSTRUCTUREMXAPITKCLASSApi", () => {
  let instance: api.MaximoAPIForCLASSSTRUCTUREMXAPITKCLASSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCLASSSTRUCTUREMXAPITKCLASSApi(config)
  });

  test("osMxapitkclassGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapitkclassGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapitkclassIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapitkclassIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapitkclassIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapitkclassIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapitkclassIdPost", () => {
    const body: api.RESOURCEMXAPITKCLASS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitkclassIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapitkclassPost", () => {
    const body: api.RESOURCEMXAPITKCLASS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitkclassPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForChartOfAccountsMXAPICOAApi", () => {
  let instance: api.MaximoAPIForChartOfAccountsMXAPICOAApi
  beforeEach(function() {
    instance = new api.MaximoAPIForChartOfAccountsMXAPICOAApi(config)
  });

  test("osMxapicoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicoaIdPost", () => {
    const body: api.RESOURCEMXAPICOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicoaPost", () => {
    const body: api.RESOURCEMXAPICOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCollectionMXAPICOLLECTIONApi", () => {
  let instance: api.MaximoAPIForCollectionMXAPICOLLECTIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCollectionMXAPICOLLECTIONApi(config)
  });

  test("osMxapicollectionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicollectionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicollectionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicollectionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicollectionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicollectionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicollectionIdPost", () => {
    const body: api.RESOURCEMXAPICOLLECTION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicollectionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicollectionPost", () => {
    const body: api.RESOURCEMXAPICOLLECTION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicollectionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCommoditiesMXAPICOMMODITYApi", () => {
  let instance: api.MaximoAPIForCommoditiesMXAPICOMMODITYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCommoditiesMXAPICOMMODITYApi(config)
  });

  test("osMxapicommodityGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicommodityGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicommodityIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicommodityIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicommodityIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicommodityIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicommodityIdPost", () => {
    const body: api.RESOURCEMXAPICOMMODITY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicommodityIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicommodityPost", () => {
    const body: api.RESOURCEMXAPICOMMODITY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicommodityPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCommunicationTemplateDefinitionMXAPICTEMPLATEApi", () => {
  let instance: api.MaximoAPIForCommunicationTemplateDefinitionMXAPICTEMPLATEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCommunicationTemplateDefinitionMXAPICTEMPLATEApi(config)
  });

  test("osMxapictemplateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapictemplateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapictemplateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapictemplateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapictemplateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapictemplateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapictemplateIdPost", () => {
    const body: api.RESOURCEMXAPICTEMPLATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapictemplateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapictemplatePost", () => {
    const body: api.RESOURCEMXAPICTEMPLATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapictemplatePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCompaniesMXAPIVENDORApi", () => {
  let instance: api.MaximoAPIForCompaniesMXAPIVENDORApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCompaniesMXAPIVENDORApi(config)
  });

  test("osMxapivendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapivendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapivendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapivendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapivendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapivendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapivendorIdPost", () => {
    const body: api.RESOURCEMXAPIVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapivendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapivendorPost", () => {
    const body: api.RESOURCEMXAPIVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapivendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCompanyMasterMXAPIVENDORMSTRApi", () => {
  let instance: api.MaximoAPIForCompanyMasterMXAPIVENDORMSTRApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCompanyMasterMXAPIVENDORMSTRApi(config)
  });

  test("osMxapivendormstrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapivendormstrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapivendormstrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapivendormstrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapivendormstrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapivendormstrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapivendormstrIdPost", () => {
    const body: api.RESOURCEMXAPIVENDORMSTR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapivendormstrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapivendormstrPost", () => {
    const body: api.RESOURCEMXAPIVENDORMSTR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapivendormstrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForConfiguringApplicationPropertiesMXAPIAPPPROPCFGApi", () => {
  let instance: api.MaximoAPIForConfiguringApplicationPropertiesMXAPIAPPPROPCFGApi
  beforeEach(function() {
    instance = new api.MaximoAPIForConfiguringApplicationPropertiesMXAPIAPPPROPCFGApi(config)
  });

  test("osMxapiapppropcfgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiapppropcfgGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiapppropcfgIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiapppropcfgIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiapppropcfgIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiapppropcfgIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiapppropcfgIdPost", () => {
    const body: api.RESOURCEMXAPIAPPPROPCFG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiapppropcfgIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiapppropcfgPost", () => {
    const body: api.RESOURCEMXAPIAPPPROPCFG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiapppropcfgPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForContractsMXAPICONTRACTApi", () => {
  let instance: api.MaximoAPIForContractsMXAPICONTRACTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForContractsMXAPICONTRACTApi(config)
  });

  test("osMxapicontractGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicontractGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicontractIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicontractIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicontractIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicontractIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicontractIdPost", () => {
    const body: api.RESOURCEMXAPICONTRACT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicontractIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicontractPost", () => {
    const body: api.RESOURCEMXAPICONTRACT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicontractPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForConversionFactorBetweenMeasureUnitsMXAPICONVERSIONApi", () => {
  let instance: api.MaximoAPIForConversionFactorBetweenMeasureUnitsMXAPICONVERSIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForConversionFactorBetweenMeasureUnitsMXAPICONVERSIONApi(config)
  });

  test("osMxapiconversionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiconversionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiconversionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiconversionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiconversionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiconversionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiconversionIdPost", () => {
    const body: api.RESOURCEMXAPICONVERSION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiconversionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiconversionPost", () => {
    const body: api.RESOURCEMXAPICONVERSION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiconversionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCountBookLineMXAPICNTBOOKLINEApi", () => {
  let instance: api.MaximoAPIForCountBookLineMXAPICNTBOOKLINEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCountBookLineMXAPICNTBOOKLINEApi(config)
  });

  test("osMxapicntbooklineGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicntbooklineGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicntbooklineIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicntbooklineIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicntbooklineIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicntbooklineIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicntbooklineIdPost", () => {
    const body: api.RESOURCEMXAPICNTBOOKLINE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicntbooklineIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicntbooklinePost", () => {
    const body: api.RESOURCEMXAPICNTBOOKLINE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicntbooklinePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCountBooksMXAPICNTBOOKApi", () => {
  let instance: api.MaximoAPIForCountBooksMXAPICNTBOOKApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCountBooksMXAPICNTBOOKApi(config)
  });

  test("osMxapicntbookGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicntbookGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicntbookIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicntbookIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicntbookIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicntbookIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicntbookIdPost", () => {
    const body: api.RESOURCEMXAPICNTBOOK = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicntbookIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicntbookPost", () => {
    const body: api.RESOURCEMXAPICNTBOOK = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicntbookPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCraftMXAPICRAFTApi", () => {
  let instance: api.MaximoAPIForCraftMXAPICRAFTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCraftMXAPICRAFTApi(config)
  });

  test("osMxapicraftGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapicraftGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapicraftIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapicraftIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapicraftIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapicraftIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapicraftIdPost", () => {
    const body: api.RESOURCEMXAPICRAFT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicraftIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapicraftPost", () => {
    const body: api.RESOURCEMXAPICRAFT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapicraftPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCrewTypesMXAPIAMCREWTApi", () => {
  let instance: api.MaximoAPIForCrewTypesMXAPIAMCREWTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCrewTypesMXAPIAMCREWTApi(config)
  });

  test("osMxapiamcrewtGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewtGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewtIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiamcrewtIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewtIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewtIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewtIdPost", () => {
    const body: api.RESOURCEMXAPIAMCREWT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewtIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewtPost", () => {
    const body: api.RESOURCEMXAPIAMCREWT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewtPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForCrewsMXAPIAMCREWApi", () => {
  let instance: api.MaximoAPIForCrewsMXAPIAMCREWApi
  beforeEach(function() {
    instance = new api.MaximoAPIForCrewsMXAPIAMCREWApi(config)
  });

  test("osMxapiamcrewGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiamcrewIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewIdPost", () => {
    const body: api.RESOURCEMXAPIAMCREW = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiamcrewPost", () => {
    const body: api.RESOURCEMXAPIAMCREW = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiamcrewPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForDocumentLibraryMXAPIDOCINFOApi", () => {
  let instance: api.MaximoAPIForDocumentLibraryMXAPIDOCINFOApi
  beforeEach(function() {
    instance = new api.MaximoAPIForDocumentLibraryMXAPIDOCINFOApi(config)
  });

  test("osMxapidocinfoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapidocinfoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapidocinfoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapidocinfoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapidocinfoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapidocinfoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapidocinfoIdPost", () => {
    const body: api.RESOURCEMXAPIDOCINFO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapidocinfoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapidocinfoPost", () => {
    const body: api.RESOURCEMXAPIDOCINFO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapidocinfoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForFailureListsMXAPIFAILURELISTApi", () => {
  let instance: api.MaximoAPIForFailureListsMXAPIFAILURELISTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForFailureListsMXAPIFAILURELISTApi(config)
  });

  test("osMxapifailurelistGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapifailurelistGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapifailurelistIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapifailurelistIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapifailurelistIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapifailurelistIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapifailurelistIdPost", () => {
    const body: api.RESOURCEMXAPIFAILURELIST = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapifailurelistIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapifailurelistPost", () => {
    const body: api.RESOURCEMXAPIFAILURELIST = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapifailurelistPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForFinancialProjectsMXAPIPROJApi", () => {
  let instance: api.MaximoAPIForFinancialProjectsMXAPIPROJApi
  beforeEach(function() {
    instance = new api.MaximoAPIForFinancialProjectsMXAPIPROJApi(config)
  });

  test("osMxapiprojGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiprojGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiprojIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiprojIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiprojIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiprojIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiprojIdPost", () => {
    const body: api.RESOURCEMXAPIPROJ = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiprojIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiprojPost", () => {
    const body: api.RESOURCEMXAPIPROJ = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiprojPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForForHazardsAndPrecautionsMXAPIHAZARDApi", () => {
  let instance: api.MaximoAPIForForHazardsAndPrecautionsMXAPIHAZARDApi
  beforeEach(function() {
    instance = new api.MaximoAPIForForHazardsAndPrecautionsMXAPIHAZARDApi(config)
  });

  test("osMxapihazardGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapihazardGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapihazardIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapihazardIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapihazardIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapihazardIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapihazardIdPost", () => {
    const body: api.RESOURCEMXAPIHAZARD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapihazardIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapihazardPost", () => {
    const body: api.RESOURCEMXAPIHAZARD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapihazardPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForGLComponentsMXAPIGLCOMPApi", () => {
  let instance: api.MaximoAPIForGLComponentsMXAPIGLCOMPApi
  beforeEach(function() {
    instance = new api.MaximoAPIForGLComponentsMXAPIGLCOMPApi(config)
  });

  test("osMxapiglcompGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiglcompGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiglcompIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiglcompIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiglcompIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiglcompIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiglcompIdPost", () => {
    const body: api.RESOURCEMXAPIGLCOMP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiglcompIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiglcompPost", () => {
    const body: api.RESOURCEMXAPIGLCOMP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiglcompPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForGLConfigurationMXAPIGLCONFIGUREApi", () => {
  let instance: api.MaximoAPIForGLConfigurationMXAPIGLCONFIGUREApi
  beforeEach(function() {
    instance = new api.MaximoAPIForGLConfigurationMXAPIGLCONFIGUREApi(config)
  });

  test("osMxapiglconfigureGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiglconfigureGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiglconfigureIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiglconfigureIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiglconfigureIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiglconfigureIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiglconfigureIdPost", () => {
    const body: api.RESOURCEMXAPIGLCONFIGURE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiglconfigureIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiglconfigurePost", () => {
    const body: api.RESOURCEMXAPIGLCONFIGURE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiglconfigurePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForGLJournalsMXAPIGLTXNApi", () => {
  let instance: api.MaximoAPIForGLJournalsMXAPIGLTXNApi
  beforeEach(function() {
    instance = new api.MaximoAPIForGLJournalsMXAPIGLTXNApi(config)
  });

  test("osMxapigltxnGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapigltxnGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapigltxnIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapigltxnIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapigltxnIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapigltxnIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapigltxnIdPost", () => {
    const body: api.RESOURCEMXAPIGLTXN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapigltxnIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapigltxnPost", () => {
    const body: api.RESOURCEMXAPIGLTXN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapigltxnPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForIncidentsMXAPIINCIDENTApi", () => {
  let instance: api.MaximoAPIForIncidentsMXAPIINCIDENTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForIncidentsMXAPIINCIDENTApi(config)
  });

  test("osMxapiincidentGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiincidentGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiincidentIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiincidentIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiincidentIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiincidentIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiincidentIdPost", () => {
    const body: api.RESOURCEMXAPIINCIDENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiincidentIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiincidentPost", () => {
    const body: api.RESOURCEMXAPIINCIDENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiincidentPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInsightsMXAPIINSIGHTApi", () => {
  let instance: api.MaximoAPIForInsightsMXAPIINSIGHTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInsightsMXAPIINSIGHTApi(config)
  });

  test("osMxapiinsightGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinsightGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinsightIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinsightIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinsightIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinsightIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinsightIdPost", () => {
    const body: api.RESOURCEMXAPIINSIGHT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinsightIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinsightPost", () => {
    const body: api.RESOURCEMXAPIINSIGHT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinsightPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInspectionFieldsMXAPIINSPFIELDApi", () => {
  let instance: api.MaximoAPIForInspectionFieldsMXAPIINSPFIELDApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInspectionFieldsMXAPIINSPFIELDApi(config)
  });

  test("osMxapiinspfieldGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspfieldGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspfieldIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinspfieldIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinspfieldIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspfieldIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspfieldIdPost", () => {
    const body: api.RESOURCEMXAPIINSPFIELD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspfieldIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspfieldPost", () => {
    const body: api.RESOURCEMXAPIINSPFIELD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspfieldPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInspectionFormUseWithTableIntegrationEndPointMXAPIINSPFORMUSEWITHApi", () => {
  let instance: api.MaximoAPIForInspectionFormUseWithTableIntegrationEndPointMXAPIINSPFORMUSEWITHApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInspectionFormUseWithTableIntegrationEndPointMXAPIINSPFORMUSEWITHApi(config)
  });

  test("osMxapiinspformusewithGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspformusewithGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformusewithIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinspformusewithIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinspformusewithIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspformusewithIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformusewithIdPost", () => {
    const body: api.RESOURCEMXAPIINSPFORMUSEWITH = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspformusewithIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformusewithPost", () => {
    const body: api.RESOURCEMXAPIINSPFORMUSEWITH = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspformusewithPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInspectionFormsMXAPIINSPFORMApi", () => {
  let instance: api.MaximoAPIForInspectionFormsMXAPIINSPFORMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInspectionFormsMXAPIINSPFORMApi(config)
  });

  test("osMxapiinspformGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspformGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinspformIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinspformIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspformIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformIdPost", () => {
    const body: api.RESOURCEMXAPIINSPFORM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspformIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformPost", () => {
    const body: api.RESOURCEMXAPIINSPFORM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspformPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInventoryBalanceMXAPIINVBALApi", () => {
  let instance: api.MaximoAPIForInventoryBalanceMXAPIINVBALApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInventoryBalanceMXAPIINVBALApi(config)
  });

  test("osMxapiinvbalGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvbalGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvbalIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvbalIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvbalIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvbalIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvbalIdPost", () => {
    const body: api.RESOURCEMXAPIINVBAL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvbalIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvbalPost", () => {
    const body: api.RESOURCEMXAPIINVBAL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvbalPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInventoryIssuesMXAPIINVISSUEApi", () => {
  let instance: api.MaximoAPIForInventoryIssuesMXAPIINVISSUEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInventoryIssuesMXAPIINVISSUEApi(config)
  });

  test("osMxapiinvissueGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvissueGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvissueIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvissueIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvissueIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvissueIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvissueIdPost", () => {
    const body: api.RESOURCEMXAPIINVISSUE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvissueIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvissuePost", () => {
    const body: api.RESOURCEMXAPIINVISSUE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvissuePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInventoryReservationsMXAPIINVRESApi", () => {
  let instance: api.MaximoAPIForInventoryReservationsMXAPIINVRESApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInventoryReservationsMXAPIINVRESApi(config)
  });

  test("osMxapiinvresGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvresGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvresIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvresIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvresIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvresIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvresIdPost", () => {
    const body: api.RESOURCEMXAPIINVRES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvresIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvresPost", () => {
    const body: api.RESOURCEMXAPIINVRES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvresPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInventoryUsageMXAPIINVUSEApi", () => {
  let instance: api.MaximoAPIForInventoryUsageMXAPIINVUSEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInventoryUsageMXAPIINVUSEApi(config)
  });

  test("osMxapiinvuseGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvuseGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvuseIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvuseIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvuseIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvuseIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvuseIdPost", () => {
    const body: api.RESOURCEMXAPIINVUSE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvuseIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvusePost", () => {
    const body: api.RESOURCEMXAPIINVUSE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvusePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForInvoiceMXAPIINVOICEApi", () => {
  let instance: api.MaximoAPIForInvoiceMXAPIINVOICEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForInvoiceMXAPIINVOICEApi(config)
  });

  test("osMxapiinvoiceGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvoiceGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvoiceIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvoiceIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvoiceIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvoiceIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvoiceIdPost", () => {
    const body: api.RESOURCEMXAPIINVOICE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvoiceIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvoicePost", () => {
    const body: api.RESOURCEMXAPIINVOICE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvoicePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForItemVendorMXAPIINVVENDORApi", () => {
  let instance: api.MaximoAPIForItemVendorMXAPIINVVENDORApi
  beforeEach(function() {
    instance = new api.MaximoAPIForItemVendorMXAPIINVVENDORApi(config)
  });

  test("osMxapiinvvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvvendorIdPost", () => {
    const body: api.RESOURCEMXAPIINVVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvvendorPost", () => {
    const body: api.RESOURCEMXAPIINVVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForItemsMXAPIITEMApi", () => {
  let instance: api.MaximoAPIForItemsMXAPIITEMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForItemsMXAPIITEMApi(config)
  });

  test("osMxapiitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiitemIdPost", () => {
    const body: api.RESOURCEMXAPIITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiitemPost", () => {
    const body: api.RESOURCEMXAPIITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForJobPlansMXAPIJOBPLANApi", () => {
  let instance: api.MaximoAPIForJobPlansMXAPIJOBPLANApi
  beforeEach(function() {
    instance = new api.MaximoAPIForJobPlansMXAPIJOBPLANApi(config)
  });

  test("osMxapijobplanGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapijobplanGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapijobplanIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapijobplanIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapijobplanIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapijobplanIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapijobplanIdPost", () => {
    const body: api.RESOURCEMXAPIJOBPLAN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapijobplanIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapijobplanPost", () => {
    const body: api.RESOURCEMXAPIJOBPLAN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapijobplanPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLBSLocationsMXAPILBSLOCATIONApi", () => {
  let instance: api.MaximoAPIForLBSLocationsMXAPILBSLOCATIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLBSLocationsMXAPILBSLOCATIONApi(config)
  });

  test("osMxapilbslocationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilbslocationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilbslocationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilbslocationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilbslocationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilbslocationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilbslocationIdPost", () => {
    const body: api.RESOURCEMXAPILBSLOCATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilbslocationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilbslocationPost", () => {
    const body: api.RESOURCEMXAPILBSLOCATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilbslocationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLaborCraftRateMXAPILABORCRAFTRATEApi", () => {
  let instance: api.MaximoAPIForLaborCraftRateMXAPILABORCRAFTRATEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLaborCraftRateMXAPILABORCRAFTRATEApi(config)
  });

  test("osMxapilaborcraftrateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilaborcraftrateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilaborcraftrateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilaborcraftrateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilaborcraftrateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilaborcraftrateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilaborcraftrateIdPost", () => {
    const body: api.RESOURCEMXAPILABORCRAFTRATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilaborcraftrateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilaborcraftratePost", () => {
    const body: api.RESOURCEMXAPILABORCRAFTRATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilaborcraftratePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLaborMXAPILABORApi", () => {
  let instance: api.MaximoAPIForLaborMXAPILABORApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLaborMXAPILABORApi(config)
  });

  test("osMxapilaborGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilaborGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilaborIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilaborIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilaborIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilaborIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilaborIdPost", () => {
    const body: api.RESOURCEMXAPILABOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilaborIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilaborPost", () => {
    const body: api.RESOURCEMXAPILABOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilaborPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLaborPayMXAPIEMPACTApi", () => {
  let instance: api.MaximoAPIForLaborPayMXAPIEMPACTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLaborPayMXAPIEMPACTApi(config)
  });

  test("osMxapiempactGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiempactGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiempactIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiempactIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiempactIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiempactIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiempactIdPost", () => {
    const body: api.RESOURCEMXAPIEMPACT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiempactIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiempactPost", () => {
    const body: api.RESOURCEMXAPIEMPACT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiempactPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLocationANCESTORInformationMXAPILOCANCESTORApi", () => {
  let instance: api.MaximoAPIForLocationANCESTORInformationMXAPILOCANCESTORApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLocationANCESTORInformationMXAPILOCANCESTORApi(config)
  });

  test("osMxapilocancestorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocancestorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilocancestorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilocancestorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilocancestorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocancestorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilocancestorIdPost", () => {
    const body: api.RESOURCEMXAPILOCANCESTOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocancestorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilocancestorPost", () => {
    const body: api.RESOURCEMXAPILOCANCESTOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocancestorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLocationInformationMXAPILOCATIONApi", () => {
  let instance: api.MaximoAPIForLocationInformationMXAPILOCATIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLocationInformationMXAPILOCATIONApi(config)
  });

  test("osMxapilocationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilocationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilocationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationIdPost", () => {
    const body: api.RESOURCEMXAPILOCATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationPost", () => {
    const body: api.RESOURCEMXAPILOCATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLocationMetersMXAPILOCATIONMETERApi", () => {
  let instance: api.MaximoAPIForLocationMetersMXAPILOCATIONMETERApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLocationMetersMXAPILOCATIONMETERApi(config)
  });

  test("osMxapilocationmeterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocationmeterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationmeterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilocationmeterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilocationmeterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocationmeterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationmeterIdPost", () => {
    const body: api.RESOURCEMXAPILOCATIONMETER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocationmeterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationmeterPost", () => {
    const body: api.RESOURCEMXAPILOCATIONMETER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocationmeterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLocationSystemsMXAPILOCSYSTEMApi", () => {
  let instance: api.MaximoAPIForLocationSystemsMXAPILOCSYSTEMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLocationSystemsMXAPILOCSYSTEMApi(config)
  });

  test("osMxapilocsystemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocsystemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilocsystemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilocsystemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilocsystemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocsystemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilocsystemIdPost", () => {
    const body: api.RESOURCEMXAPILOCSYSTEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocsystemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilocsystemPost", () => {
    const body: api.RESOURCEMXAPILOCSYSTEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocsystemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForLocationsMXAPILOCATIONSApi", () => {
  let instance: api.MaximoAPIForLocationsMXAPILOCATIONSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForLocationsMXAPILOCATIONSApi(config)
  });

  test("osMxapilocationsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocationsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilocationsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocationsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForMapManagerMXAPIMAPMANAGERApi", () => {
  let instance: api.MaximoAPIForMapManagerMXAPIMAPMANAGERApi
  beforeEach(function() {
    instance = new api.MaximoAPIForMapManagerMXAPIMAPMANAGERApi(config)
  });

  test("osMxapimapmanagerGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapimapmanagerGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapimapmanagerIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapimapmanagerIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapimapmanagerIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapimapmanagerIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapimapmanagerIdPost", () => {
    const body: api.RESOURCEMXAPIMAPMANAGER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimapmanagerIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapimapmanagerPost", () => {
    const body: api.RESOURCEMXAPIMAPMANAGER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimapmanagerPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForMeterReadingMXAPIMETERDATAApi", () => {
  let instance: api.MaximoAPIForMeterReadingMXAPIMETERDATAApi
  beforeEach(function() {
    instance = new api.MaximoAPIForMeterReadingMXAPIMETERDATAApi(config)
  });

  test("osMxapimeterdataGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapimeterdataGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapimeterdataIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapimeterdataIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapimeterdataIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapimeterdataIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapimeterdataIdPost", () => {
    const body: api.RESOURCEMXAPIMETERDATA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimeterdataIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapimeterdataPost", () => {
    const body: api.RESOURCEMXAPIMETERDATA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimeterdataPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForOperationLocationMXAPIOPERLOCApi", () => {
  let instance: api.MaximoAPIForOperationLocationMXAPIOPERLOCApi
  beforeEach(function() {
    instance = new api.MaximoAPIForOperationLocationMXAPIOPERLOCApi(config)
  });

  test("osMxapioperlocGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapioperlocGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapioperlocIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapioperlocIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapioperlocIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapioperlocIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapioperlocIdPost", () => {
    const body: api.RESOURCEMXAPIOPERLOC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapioperlocIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapioperlocPost", () => {
    const body: api.RESOURCEMXAPIOPERLOC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapioperlocPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForOrganizationAndSiteDefinitionMXAPIORGANIZATIONApi", () => {
  let instance: api.MaximoAPIForOrganizationAndSiteDefinitionMXAPIORGANIZATIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForOrganizationAndSiteDefinitionMXAPIORGANIZATIONApi(config)
  });

  test("osMxapiorganizationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiorganizationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiorganizationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiorganizationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiorganizationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiorganizationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiorganizationIdPost", () => {
    const body: api.RESOURCEMXAPIORGANIZATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiorganizationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiorganizationPost", () => {
    const body: api.RESOURCEMXAPIORGANIZATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiorganizationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPeoplesMXAPIPERSONApi", () => {
  let instance: api.MaximoAPIForPeoplesMXAPIPERSONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPeoplesMXAPIPERSONApi(config)
  });

  test("osMxapipersonGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipersonGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipersonIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipersonIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipersonIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipersonIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipersonIdPost", () => {
    const body: api.RESOURCEMXAPIPERSON = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipersonIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipersonPost", () => {
    const body: api.RESOURCEMXAPIPERSON = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipersonPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPersonAndUserMXAPIPERUSERApi", () => {
  let instance: api.MaximoAPIForPersonAndUserMXAPIPERUSERApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPersonAndUserMXAPIPERUSERApi(config)
  });

  test("osMxapiperuserGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiperuserGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiperuserIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiperuserIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiperuserIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiperuserIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiperuserIdPost", () => {
    const body: api.RESOURCEMXAPIPERUSER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiperuserIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiperuserPost", () => {
    const body: api.RESOURCEMXAPIPERUSER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiperuserPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPersonGroupMXAPIGROUPApi", () => {
  let instance: api.MaximoAPIForPersonGroupMXAPIGROUPApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPersonGroupMXAPIGROUPApi(config)
  });

  test("osMxapigroupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapigroupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapigroupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapigroupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapigroupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapigroupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapigroupIdPost", () => {
    const body: api.RESOURCEMXAPIGROUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapigroupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapigroupPost", () => {
    const body: api.RESOURCEMXAPIGROUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapigroupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPersonGroupMXAPIPERGROUPApi", () => {
  let instance: api.MaximoAPIForPersonGroupMXAPIPERGROUPApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPersonGroupMXAPIPERGROUPApi(config)
  });

  test("osMxapipergroupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipergroupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipergroupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipergroupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipergroupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipergroupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipergroupIdPost", () => {
    const body: api.RESOURCEMXAPIPERGROUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipergroupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipergroupPost", () => {
    const body: api.RESOURCEMXAPIPERGROUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipergroupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPersonGroupUIMXAPIPERSONGROUPApi", () => {
  let instance: api.MaximoAPIForPersonGroupUIMXAPIPERSONGROUPApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPersonGroupUIMXAPIPERSONGROUPApi(config)
  });

  test("osMxapipersongroupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipersongroupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipersongroupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipersongroupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipersongroupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipersongroupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipersongroupIdPost", () => {
    const body: api.RESOURCEMXAPIPERSONGROUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipersongroupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipersongroupPost", () => {
    const body: api.RESOURCEMXAPIPERSONGROUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipersongroupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPersonUserForTheAdministratorUploadOfDataMXAPIADMINApi", () => {
  let instance: api.MaximoAPIForPersonUserForTheAdministratorUploadOfDataMXAPIADMINApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPersonUserForTheAdministratorUploadOfDataMXAPIADMINApi(config)
  });

  test("osMxapiadminGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiadminGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiadminIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiadminIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiadminIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiadminIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiadminIdPost", () => {
    const body: api.RESOURCEMXAPIADMIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiadminIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiadminPost", () => {
    const body: api.RESOURCEMXAPIADMIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiadminPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPreventiveMaintenanceMHPMApi", () => {
  let instance: api.MaximoAPIForPreventiveMaintenanceMHPMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPreventiveMaintenanceMHPMApi(config)
  });

  test("osMhpmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhpmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhpmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhpmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhpmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhpmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhpmIdPost", () => {
    const body: api.RESOURCEMHPM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhpmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhpmPost", () => {
    const body: api.RESOURCEMHPM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhpmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPreventiveMaintenanceMXAPIPMApi", () => {
  let instance: api.MaximoAPIForPreventiveMaintenanceMXAPIPMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPreventiveMaintenanceMXAPIPMApi(config)
  });

  test("osMxapipmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipmIdPost", () => {
    const body: api.RESOURCEMXAPIPM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipmPost", () => {
    const body: api.RESOURCEMXAPIPM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForProblemsMXAPIPROBLEMApi", () => {
  let instance: api.MaximoAPIForProblemsMXAPIPROBLEMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForProblemsMXAPIPROBLEMApi(config)
  });

  test("osMxapiproblemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiproblemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiproblemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiproblemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiproblemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiproblemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiproblemIdPost", () => {
    const body: api.RESOURCEMXAPIPROBLEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiproblemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiproblemPost", () => {
    const body: api.RESOURCEMXAPIPROBLEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiproblemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPropertiesMXAPIPROPApi", () => {
  let instance: api.MaximoAPIForPropertiesMXAPIPROPApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPropertiesMXAPIPROPApi(config)
  });

  test("osMxapipropGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipropGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipropIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipropIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipropIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipropIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipropIdPost", () => {
    const body: api.RESOURCEMXAPIPROP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipropIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipropPost", () => {
    const body: api.RESOURCEMXAPIPROP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipropPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPurchaseContractMXAPIPCApi", () => {
  let instance: api.MaximoAPIForPurchaseContractMXAPIPCApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPurchaseContractMXAPIPCApi(config)
  });

  test("osMxapipcGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipcGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipcIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipcIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipcIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipcIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipcIdPost", () => {
    const body: api.RESOURCEMXAPIPC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipcIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipcPost", () => {
    const body: api.RESOURCEMXAPIPC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipcPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPurchaseOrdersMXAPIPOApi", () => {
  let instance: api.MaximoAPIForPurchaseOrdersMXAPIPOApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPurchaseOrdersMXAPIPOApi(config)
  });

  test("osMxapipoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapipoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapipoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapipoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapipoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapipoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapipoIdPost", () => {
    const body: api.RESOURCEMXAPIPO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapipoPost", () => {
    const body: api.RESOURCEMXAPIPO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapipoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPurchaseRequisitionsMXAPIPRApi", () => {
  let instance: api.MaximoAPIForPurchaseRequisitionsMXAPIPRApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPurchaseRequisitionsMXAPIPRApi(config)
  });

  test("osMxapiprGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiprGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiprIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiprIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiprIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiprIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiprIdPost", () => {
    const body: api.RESOURCEMXAPIPR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiprIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiprPost", () => {
    const body: api.RESOURCEMXAPIPR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiprPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForPurchasedLicenseMXAPILICENSEApi", () => {
  let instance: api.MaximoAPIForPurchasedLicenseMXAPILICENSEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForPurchasedLicenseMXAPILICENSEApi(config)
  });

  test("osMxapilicenseGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilicenseGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilicenseIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilicenseIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForQueriesMHQUERYApi", () => {
  let instance: api.MaximoAPIForQueriesMHQUERYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForQueriesMHQUERYApi(config)
  });

  test("osMhqueryGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhqueryGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhqueryIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhqueryIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhqueryIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhqueryIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhqueryIdPost", () => {
    const body: api.RESOURCEMHQUERY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhqueryIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhqueryPost", () => {
    const body: api.RESOURCEMHQUERY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhqueryPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForQueriesMXAPIQUERYApi", () => {
  let instance: api.MaximoAPIForQueriesMXAPIQUERYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForQueriesMXAPIQUERYApi(config)
  });

  test("osMxapiqueryGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiqueryGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiqueryIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiqueryIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiqueryIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiqueryIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiqueryIdPost", () => {
    const body: api.RESOURCEMXAPIQUERY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiqueryIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiqueryPost", () => {
    const body: api.RESOURCEMXAPIQUERY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiqueryPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForQueriesRecordStateMXAPIQUERYRECSTATEApi", () => {
  let instance: api.MaximoAPIForQueriesRecordStateMXAPIQUERYRECSTATEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForQueriesRecordStateMXAPIQUERYRECSTATEApi(config)
  });

  test("osMxapiqueryrecstateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiqueryrecstateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiqueryrecstateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiqueryrecstateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiqueryrecstateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiqueryrecstateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiqueryrecstateIdPost", () => {
    const body: api.RESOURCEMXAPIQUERYRECSTATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiqueryrecstateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiqueryrecstatePost", () => {
    const body: api.RESOURCEMXAPIQUERYRECSTATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiqueryrecstatePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForQueryTemplateMXAPIQUERYTEMPLATEApi", () => {
  let instance: api.MaximoAPIForQueryTemplateMXAPIQUERYTEMPLATEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForQueryTemplateMXAPIQUERYTEMPLATEApi(config)
  });

  test("osMxapiquerytemplateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiquerytemplateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiquerytemplateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiquerytemplateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiquerytemplateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiquerytemplateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiquerytemplateIdPost", () => {
    const body: api.RESOURCEMXAPIQUERYTEMPLATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiquerytemplateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiquerytemplatePost", () => {
    const body: api.RESOURCEMXAPIQUERYTEMPLATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiquerytemplatePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForReceiptsForRotatingItemsMXAPIRCVROTITMApi", () => {
  let instance: api.MaximoAPIForReceiptsForRotatingItemsMXAPIRCVROTITMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForReceiptsForRotatingItemsMXAPIRCVROTITMApi(config)
  });

  test("osMxapircvrotitmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapircvrotitmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapircvrotitmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapircvrotitmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapircvrotitmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapircvrotitmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapircvrotitmIdPost", () => {
    const body: api.RESOURCEMXAPIRCVROTITM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapircvrotitmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapircvrotitmPost", () => {
    const body: api.RESOURCEMXAPIRCVROTITM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapircvrotitmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForReceiptsMXAPIRECEIPTApi", () => {
  let instance: api.MaximoAPIForReceiptsMXAPIRECEIPTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForReceiptsMXAPIRECEIPTApi(config)
  });

  test("osMxapireceiptGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapireceiptGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapireceiptIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapireceiptIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapireceiptIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapireceiptIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapireceiptIdPost", () => {
    const body: api.RESOURCEMXAPIRECEIPT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapireceiptIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapireceiptPost", () => {
    const body: api.RESOURCEMXAPIRECEIPT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapireceiptPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForRetrievingDoctypesDataMXAPIDOCTYPEApi", () => {
  let instance: api.MaximoAPIForRetrievingDoctypesDataMXAPIDOCTYPEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForRetrievingDoctypesDataMXAPIDOCTYPEApi(config)
  });

  test("osMxapidoctypeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapidoctypeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapidoctypeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapidoctypeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapidoctypeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapidoctypeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapidoctypeIdPost", () => {
    const body: api.RESOURCEMXAPIDOCTYPE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapidoctypeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapidoctypePost", () => {
    const body: api.RESOURCEMXAPIDOCTYPE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapidoctypePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForRetrievingInspectionFormMXAPIINSPFORMSTATUSApi", () => {
  let instance: api.MaximoAPIForRetrievingInspectionFormMXAPIINSPFORMSTATUSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForRetrievingInspectionFormMXAPIINSPFORMSTATUSApi(config)
  });

  test("osMxapiinspformstatusGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspformstatusGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformstatusIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinspformstatusIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinspformstatusIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspformstatusIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformstatusIdPost", () => {
    const body: api.RESOURCEMXAPIINSPFORMSTATUS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspformstatusIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspformstatusPost", () => {
    const body: api.RESOURCEMXAPIINSPFORMSTATUS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspformstatusPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForRetrievingInspectionResultMXAPIINSPRESULTApi", () => {
  let instance: api.MaximoAPIForRetrievingInspectionResultMXAPIINSPRESULTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForRetrievingInspectionResultMXAPIINSPRESULTApi(config)
  });

  test("osMxapiinspresultGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspresultGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspresultIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinspresultIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinspresultIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspresultIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspresultIdPost", () => {
    const body: api.RESOURCEMXAPIINSPRESULT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspresultIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspresultPost", () => {
    const body: api.RESOURCEMXAPIINSPRESULT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspresultPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForScriptLaunchPointMXAPILAUNCHPOINTApi", () => {
  let instance: api.MaximoAPIForScriptLaunchPointMXAPILAUNCHPOINTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForScriptLaunchPointMXAPILAUNCHPOINTApi(config)
  });

  test("osMxapilaunchpointGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilaunchpointGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilaunchpointIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilaunchpointIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilaunchpointIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilaunchpointIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilaunchpointIdPost", () => {
    const body: api.RESOURCEMXAPILAUNCHPOINT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilaunchpointIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilaunchpointPost", () => {
    const body: api.RESOURCEMXAPILAUNCHPOINT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilaunchpointPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceAddressMXAPISERADDRESSApi", () => {
  let instance: api.MaximoAPIForServiceAddressMXAPISERADDRESSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceAddressMXAPISERADDRESSApi(config)
  });

  test("osMxapiseraddressGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiseraddressGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiseraddressIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiseraddressIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiseraddressIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiseraddressIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiseraddressIdPost", () => {
    const body: api.RESOURCEMXAPISERADDRESS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiseraddressIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiseraddressPost", () => {
    const body: api.RESOURCEMXAPISERADDRESS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiseraddressPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceAddressMXAPISRVADApi", () => {
  let instance: api.MaximoAPIForServiceAddressMXAPISRVADApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceAddressMXAPISRVADApi(config)
  });

  test("osMxapisrvadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrvadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapisrvadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapisrvadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapisrvadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrvadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapisrvadIdPost", () => {
    const body: api.RESOURCEMXAPISRVAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrvadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapisrvadPost", () => {
    const body: api.RESOURCEMXAPISRVAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrvadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceItemsMXAPISERVITEMApi", () => {
  let instance: api.MaximoAPIForServiceItemsMXAPISERVITEMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceItemsMXAPISERVITEMApi(config)
  });

  test("osMxapiservitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiservitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiservitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiservitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiservitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiservitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiservitemIdPost", () => {
    const body: api.RESOURCEMXAPISERVITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiservitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiservitemPost", () => {
    const body: api.RESOURCEMXAPISERVITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiservitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceRequestGuestDomainMXAPISRGUESTDOMAINApi", () => {
  let instance: api.MaximoAPIForServiceRequestGuestDomainMXAPISRGUESTDOMAINApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceRequestGuestDomainMXAPISRGUESTDOMAINApi(config)
  });

  test("osMxapisrguestdomainGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrguestdomainGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestdomainIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapisrguestdomainIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapisrguestdomainIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrguestdomainIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestdomainIdPost", () => {
    const body: api.RESOURCEMXAPISRGUESTDOMAIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrguestdomainIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestdomainPost", () => {
    const body: api.RESOURCEMXAPISRGUESTDOMAIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrguestdomainPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceRequestGuestEmailMXAPISRGUESTEMAILApi", () => {
  let instance: api.MaximoAPIForServiceRequestGuestEmailMXAPISRGUESTEMAILApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceRequestGuestEmailMXAPISRGUESTEMAILApi(config)
  });

  test("osMxapisrguestemailGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrguestemailGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestemailIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapisrguestemailIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapisrguestemailIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrguestemailIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestemailIdPost", () => {
    const body: api.RESOURCEMXAPISRGUESTEMAIL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrguestemailIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestemailPost", () => {
    const body: api.RESOURCEMXAPISRGUESTEMAIL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrguestemailPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceRequestGuestPolicyMXAPISRGUESTPOLICYApi", () => {
  let instance: api.MaximoAPIForServiceRequestGuestPolicyMXAPISRGUESTPOLICYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceRequestGuestPolicyMXAPISRGUESTPOLICYApi(config)
  });

  test("osMxapisrguestpolicyGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrguestpolicyGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestpolicyIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapisrguestpolicyIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapisrguestpolicyIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrguestpolicyIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestpolicyIdPost", () => {
    const body: api.RESOURCEMXAPISRGUESTPOLICY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrguestpolicyIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapisrguestpolicyPost", () => {
    const body: api.RESOURCEMXAPISRGUESTPOLICY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrguestpolicyPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForServiceRequestsMXAPISRApi", () => {
  let instance: api.MaximoAPIForServiceRequestsMXAPISRApi
  beforeEach(function() {
    instance = new api.MaximoAPIForServiceRequestsMXAPISRApi(config)
  });

  test("osMxapisrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapisrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapisrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapisrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapisrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapisrIdPost", () => {
    const body: api.RESOURCEMXAPISR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapisrPost", () => {
    const body: api.RESOURCEMXAPISR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForShiftUIDefinitionMXAPISHIFTApi", () => {
  let instance: api.MaximoAPIForShiftUIDefinitionMXAPISHIFTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForShiftUIDefinitionMXAPISHIFTApi(config)
  });

  test("osMxapishiftGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapishiftGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapishiftIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapishiftIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapishiftIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapishiftIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapishiftIdPost", () => {
    const body: api.RESOURCEMXAPISHIFT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapishiftIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapishiftPost", () => {
    const body: api.RESOURCEMXAPISHIFT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapishiftPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForShipmentMXAPISHIPMENTApi", () => {
  let instance: api.MaximoAPIForShipmentMXAPISHIPMENTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForShipmentMXAPISHIPMENTApi(config)
  });

  test("osMxapishipmentGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapishipmentGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapishipmentIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapishipmentIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapishipmentIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapishipmentIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapishipmentIdPost", () => {
    const body: api.RESOURCEMXAPISHIPMENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapishipmentIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapishipmentPost", () => {
    const body: api.RESOURCEMXAPISHIPMENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapishipmentPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForSolutionObjectForUIMXAPISOLUTIONApi", () => {
  let instance: api.MaximoAPIForSolutionObjectForUIMXAPISOLUTIONApi
  beforeEach(function() {
    instance = new api.MaximoAPIForSolutionObjectForUIMXAPISOLUTIONApi(config)
  });

  test("osMxapisolutionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapisolutionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapisolutionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapisolutionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapisolutionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapisolutionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapisolutionIdPost", () => {
    const body: api.RESOURCEMXAPISOLUTION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisolutionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapisolutionPost", () => {
    const body: api.RESOURCEMXAPISOLUTION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapisolutionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForSoreroomInventoryMXAPIINVENTORYApi", () => {
  let instance: api.MaximoAPIForSoreroomInventoryMXAPIINVENTORYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForSoreroomInventoryMXAPIINVENTORYApi(config)
  });

  test("osMxapiinventoryGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinventoryGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinventoryIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinventoryIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinventoryIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinventoryIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinventoryIdPost", () => {
    const body: api.RESOURCEMXAPIINVENTORY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinventoryIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinventoryPost", () => {
    const body: api.RESOURCEMXAPIINVENTORY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinventoryPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForSoreroomLocationsMXAPISTORELOCApi", () => {
  let instance: api.MaximoAPIForSoreroomLocationsMXAPISTORELOCApi
  beforeEach(function() {
    instance = new api.MaximoAPIForSoreroomLocationsMXAPISTORELOCApi(config)
  });

  test("osMxapistorelocGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapistorelocGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapistorelocIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapistorelocIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapistorelocIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapistorelocIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapistorelocIdPost", () => {
    const body: api.RESOURCEMXAPISTORELOC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapistorelocIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapistorelocPost", () => {
    const body: api.RESOURCEMXAPISTORELOC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapistorelocPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForStoreroomMeasureUnitMXAPIMEASUREUNITApi", () => {
  let instance: api.MaximoAPIForStoreroomMeasureUnitMXAPIMEASUREUNITApi
  beforeEach(function() {
    instance = new api.MaximoAPIForStoreroomMeasureUnitMXAPIMEASUREUNITApi(config)
  });

  test("osMxapimeasureunitGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapimeasureunitGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapimeasureunitIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapimeasureunitIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapimeasureunitIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapimeasureunitIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapimeasureunitIdPost", () => {
    const body: api.RESOURCEMXAPIMEASUREUNIT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimeasureunitIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapimeasureunitPost", () => {
    const body: api.RESOURCEMXAPIMEASUREUNIT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimeasureunitPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForSystemLocationsMXAPILOCSYSApi", () => {
  let instance: api.MaximoAPIForSystemLocationsMXAPILOCSYSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForSystemLocationsMXAPILOCSYSApi(config)
  });

  test("osMxapilocsysGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocsysGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapilocsysIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapilocsysIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapilocsysIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapilocsysIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapilocsysIdPost", () => {
    const body: api.RESOURCEMXAPILOCSYS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocsysIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapilocsysPost", () => {
    const body: api.RESOURCEMXAPILOCSYS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapilocsysPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForTKServiceAddressMXAPITKSRVADApi", () => {
  let instance: api.MaximoAPIForTKServiceAddressMXAPITKSRVADApi
  beforeEach(function() {
    instance = new api.MaximoAPIForTKServiceAddressMXAPITKSRVADApi(config)
  });

  test("osMxapitksrvadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapitksrvadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapitksrvadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapitksrvadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapitksrvadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapitksrvadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapitksrvadIdPost", () => {
    const body: api.RESOURCEMXAPITKSRVAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitksrvadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapitksrvadPost", () => {
    const body: api.RESOURCEMXAPITKSRVAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitksrvadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForTKTEMPLATEMXAPITKTEMPLATEApi", () => {
  let instance: api.MaximoAPIForTKTEMPLATEMXAPITKTEMPLATEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForTKTEMPLATEMXAPITKTEMPLATEApi(config)
  });

  test("osMxapitktemplateGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapitktemplateGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapitktemplateIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapitktemplateIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapitktemplateIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapitktemplateIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapitktemplateIdPost", () => {
    const body: api.RESOURCEMXAPITKTEMPLATE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitktemplateIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapitktemplatePost", () => {
    const body: api.RESOURCEMXAPITKTEMPLATE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitktemplatePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForTableDomainMXAPITABLEDOMAINApi", () => {
  let instance: api.MaximoAPIForTableDomainMXAPITABLEDOMAINApi
  beforeEach(function() {
    instance = new api.MaximoAPIForTableDomainMXAPITABLEDOMAINApi(config)
  });

  test("osMxapitabledomainGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapitabledomainGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapitabledomainIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapitabledomainIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForToolItemsMXAPITOOLITEMApi", () => {
  let instance: api.MaximoAPIForToolItemsMXAPITOOLITEMApi
  beforeEach(function() {
    instance = new api.MaximoAPIForToolItemsMXAPITOOLITEMApi(config)
  });

  test("osMxapitoolitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapitoolitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapitoolitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapitoolitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapitoolitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapitoolitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapitoolitemIdPost", () => {
    const body: api.RESOURCEMXAPITOOLITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitoolitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapitoolitemPost", () => {
    const body: api.RESOURCEMXAPITOOLITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapitoolitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForUIOfTheKPIMAINTableMXAPIKPIMAINApi", () => {
  let instance: api.MaximoAPIForUIOfTheKPIMAINTableMXAPIKPIMAINApi
  beforeEach(function() {
    instance = new api.MaximoAPIForUIOfTheKPIMAINTableMXAPIKPIMAINApi(config)
  });

  test("osMxapikpimainGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapikpimainGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapikpimainIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapikpimainIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapikpimainIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapikpimainIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapikpimainIdPost", () => {
    const body: api.RESOURCEMXAPIKPIMAIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapikpimainIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapikpimainPost", () => {
    const body: api.RESOURCEMXAPIKPIMAIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapikpimainPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForUserQueriesMXAPIUSERQUERYApi", () => {
  let instance: api.MaximoAPIForUserQueriesMXAPIUSERQUERYApi
  beforeEach(function() {
    instance = new api.MaximoAPIForUserQueriesMXAPIUSERQUERYApi(config)
  });

  test("osMxapiuserqueryGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiuserqueryGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiuserqueryIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiuserqueryIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiuserqueryIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiuserqueryIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiuserqueryIdPost", () => {
    const body: api.RESOURCEMXAPIUSERQUERY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiuserqueryIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiuserqueryPost", () => {
    const body: api.RESOURCEMXAPIUSERQUERY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiuserqueryPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWMAssignmentsMXAPIWMASSIGNMENTApi", () => {
  let instance: api.MaximoAPIForWMAssignmentsMXAPIWMASSIGNMENTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWMAssignmentsMXAPIWMASSIGNMENTApi(config)
  });

  test("osMxapiwmassignmentGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwmassignmentGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwmassignmentIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwmassignmentIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwmassignmentIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwmassignmentIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwmassignmentIdPost", () => {
    const body: api.RESOURCEMXAPIWMASSIGNMENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwmassignmentIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwmassignmentPost", () => {
    const body: api.RESOURCEMXAPIWMASSIGNMENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwmassignmentPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWPEditSettingsMXAPIWPEDITSETTINGApi", () => {
  let instance: api.MaximoAPIForWPEditSettingsMXAPIWPEDITSETTINGApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWPEditSettingsMXAPIWPEDITSETTINGApi(config)
  });

  test("osMxapiwpeditsettingGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwpeditsettingGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwpeditsettingIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwpeditsettingIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwpeditsettingIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwpeditsettingIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwpeditsettingIdPost", () => {
    const body: api.RESOURCEMXAPIWPEDITSETTING = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwpeditsettingIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwpeditsettingPost", () => {
    const body: api.RESOURCEMXAPIWPEDITSETTING = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwpeditsettingPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWeatherGroupMXAPIWEATHERGROUPApi", () => {
  let instance: api.MaximoAPIForWeatherGroupMXAPIWEATHERGROUPApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWeatherGroupMXAPIWEATHERGROUPApi(config)
  });

  test("osMxapiweathergroupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweathergroupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiweathergroupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiweathergroupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiweathergroupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweathergroupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiweathergroupIdPost", () => {
    const body: api.RESOURCEMXAPIWEATHERGROUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweathergroupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiweathergroupPost", () => {
    const body: api.RESOURCEMXAPIWEATHERGROUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweathergroupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWeatherOrganizationMXAPIWEATHERORGApi", () => {
  let instance: api.MaximoAPIForWeatherOrganizationMXAPIWEATHERORGApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWeatherOrganizationMXAPIWEATHERORGApi(config)
  });

  test("osMxapiweatherorgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweatherorgGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherorgIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiweatherorgIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiweatherorgIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweatherorgIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherorgIdPost", () => {
    const body: api.RESOURCEMXAPIWEATHERORG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweatherorgIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherorgPost", () => {
    const body: api.RESOURCEMXAPIWEATHERORG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweatherorgPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWeatherProductsMXAPIALLPRODUCTSApi", () => {
  let instance: api.MaximoAPIForWeatherProductsMXAPIALLPRODUCTSApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWeatherProductsMXAPIALLPRODUCTSApi(config)
  });

  test("osMxapiallproductsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiallproductsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiallproductsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiallproductsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiallproductsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiallproductsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiallproductsIdPost", () => {
    const body: api.RESOURCEMXAPIALLPRODUCTS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiallproductsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiallproductsPost", () => {
    const body: api.RESOURCEMXAPIALLPRODUCTS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiallproductsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWeatherProductsMXAPIWEATHERPRODUCTApi", () => {
  let instance: api.MaximoAPIForWeatherProductsMXAPIWEATHERPRODUCTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWeatherProductsMXAPIWEATHERPRODUCTApi(config)
  });

  test("osMxapiweatherproductGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweatherproductGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherproductIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiweatherproductIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiweatherproductIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweatherproductIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherproductIdPost", () => {
    const body: api.RESOURCEMXAPIWEATHERPRODUCT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweatherproductIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherproductPost", () => {
    const body: api.RESOURCEMXAPIWEATHERPRODUCT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweatherproductPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWeatherZonesMXAPIWEATHERZONEApi", () => {
  let instance: api.MaximoAPIForWeatherZonesMXAPIWEATHERZONEApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWeatherZonesMXAPIWEATHERZONEApi(config)
  });

  test("osMxapiweatherzoneGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweatherzoneGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherzoneIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiweatherzoneIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiweatherzoneIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiweatherzoneIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherzoneIdPost", () => {
    const body: api.RESOURCEMXAPIWEATHERZONE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweatherzoneIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiweatherzonePost", () => {
    const body: api.RESOURCEMXAPIWEATHERZONE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiweatherzonePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkCenterLayoutMXAPIWORKSCAPELAYOUTApi", () => {
  let instance: api.MaximoAPIForWorkCenterLayoutMXAPIWORKSCAPELAYOUTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkCenterLayoutMXAPIWORKSCAPELAYOUTApi(config)
  });

  test("osMxapiworkscapelayoutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworkscapelayoutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiworkscapelayoutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiworkscapelayoutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiworkscapelayoutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworkscapelayoutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiworkscapelayoutIdPost", () => {
    const body: api.RESOURCEMXAPIWORKSCAPELAYOUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworkscapelayoutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiworkscapelayoutPost", () => {
    const body: api.RESOURCEMXAPIWORKSCAPELAYOUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworkscapelayoutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkOrderServiceAddressMXAPIWOSRVADApi", () => {
  let instance: api.MaximoAPIForWorkOrderServiceAddressMXAPIWOSRVADApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkOrderServiceAddressMXAPIWOSRVADApi(config)
  });

  test("osMxapiwosrvadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwosrvadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwosrvadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwosrvadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwosrvadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwosrvadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwosrvadIdPost", () => {
    const body: api.RESOURCEMXAPIWOSRVAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwosrvadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwosrvadPost", () => {
    const body: api.RESOURCEMXAPIWOSRVAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwosrvadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkOrdersMXAPIWOApi", () => {
  let instance: api.MaximoAPIForWorkOrdersMXAPIWOApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkOrdersMXAPIWOApi(config)
  });

  test("osMxapiwoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwoIdPost", () => {
    const body: api.RESOURCEMXAPIWO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwoPost", () => {
    const body: api.RESOURCEMXAPIWO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkOrdersWithHierarchyMXAPIWOHIERApi", () => {
  let instance: api.MaximoAPIForWorkOrdersWithHierarchyMXAPIWOHIERApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkOrdersWithHierarchyMXAPIWOHIERApi(config)
  });

  test("osMxapiwohierGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwohierGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwohierIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwohierIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwohierIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwohierIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwohierIdPost", () => {
    const body: api.RESOURCEMXAPIWOHIER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwohierIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwohierPost", () => {
    const body: api.RESOURCEMXAPIWOHIER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwohierPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkOrdersWithPlansAndReservationsMXAPIWODETAILApi", () => {
  let instance: api.MaximoAPIForWorkOrdersWithPlansAndReservationsMXAPIWODETAILApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkOrdersWithPlansAndReservationsMXAPIWODETAILApi(config)
  });

  test("osMxapiwodetailGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwodetailGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwodetailIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwodetailIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwodetailIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwodetailIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwodetailIdPost", () => {
    const body: api.RESOURCEMXAPIWODETAIL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwodetailIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwodetailPost", () => {
    const body: api.RESOURCEMXAPIWODETAIL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwodetailPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkViewMXAPIWORKVIEWApi", () => {
  let instance: api.MaximoAPIForWorkViewMXAPIWORKVIEWApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkViewMXAPIWORKVIEWApi(config)
  });

  test("osMxapiworkviewGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworkviewGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiworkviewIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiworkviewIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiworkviewIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworkviewIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiworkviewIdPost", () => {
    const body: api.RESOURCEMXAPIWORKVIEW = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworkviewIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiworkviewPost", () => {
    const body: api.RESOURCEMXAPIWORKVIEW = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworkviewPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorkflowAssigmentMXAPIWFASSIGNMENTApi", () => {
  let instance: api.MaximoAPIForWorkflowAssigmentMXAPIWFASSIGNMENTApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorkflowAssigmentMXAPIWFASSIGNMENTApi(config)
  });

  test("osMxapiwfassignmentGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwfassignmentGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwfassignmentIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwfassignmentIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwfassignmentIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwfassignmentIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwfassignmentIdPost", () => {
    const body: api.RESOURCEMXAPIWFASSIGNMENT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwfassignmentIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwfassignmentPost", () => {
    const body: api.RESOURCEMXAPIWFASSIGNMENT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwfassignmentPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIForWorklogMXAPIWORKLOGApi", () => {
  let instance: api.MaximoAPIForWorklogMXAPIWORKLOGApi
  beforeEach(function() {
    instance = new api.MaximoAPIForWorklogMXAPIWORKLOGApi(config)
  });

  test("osMxapiworklogGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworklogGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiworklogIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiworklogIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiworklogIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworklogIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiworklogIdPost", () => {
    const body: api.RESOURCEMXAPIWORKLOG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworklogIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiworklogPost", () => {
    const body: api.RESOURCEMXAPIWORKLOG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworklogPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIObjectStructureForAssetAttributesMXAPIASSETATTRIBUTEApi", () => {
  let instance: api.MaximoAPIObjectStructureForAssetAttributesMXAPIASSETATTRIBUTEApi
  beforeEach(function() {
    instance = new api.MaximoAPIObjectStructureForAssetAttributesMXAPIASSETATTRIBUTEApi(config)
  });

  test("osMxapiassetattributeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetattributeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetattributeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiassetattributeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiassetattributeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiassetattributeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetattributeIdPost", () => {
    const body: api.RESOURCEMXAPIASSETATTRIBUTE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetattributeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiassetattributePost", () => {
    const body: api.RESOURCEMXAPIASSETATTRIBUTE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiassetattributePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIObjectStructureForBookmarkMXAPIBOOKMARKApi", () => {
  let instance: api.MaximoAPIObjectStructureForBookmarkMXAPIBOOKMARKApi
  beforeEach(function() {
    instance = new api.MaximoAPIObjectStructureForBookmarkMXAPIBOOKMARKApi(config)
  });

  test("osMxapibookmarkGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapibookmarkGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapibookmarkIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapibookmarkIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapibookmarkIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapibookmarkIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapibookmarkIdPost", () => {
    const body: api.RESOURCEMXAPIBOOKMARK = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapibookmarkIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapibookmarkPost", () => {
    const body: api.RESOURCEMXAPIBOOKMARK = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapibookmarkPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIObjectStructureForDriverLibraryMXAPIAHDRIVERLIBApi", () => {
  let instance: api.MaximoAPIObjectStructureForDriverLibraryMXAPIAHDRIVERLIBApi
  beforeEach(function() {
    instance = new api.MaximoAPIObjectStructureForDriverLibraryMXAPIAHDRIVERLIBApi(config)
  });

  test("osMxapiahdriverlibGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiahdriverlibGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiahdriverlibIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiahdriverlibIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiahdriverlibIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiahdriverlibIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiahdriverlibIdPost", () => {
    const body: api.RESOURCEMXAPIAHDRIVERLIB = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiahdriverlibIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiahdriverlibPost", () => {
    const body: api.RESOURCEMXAPIAHDRIVERLIB = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiahdriverlibPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIObjectStructureForFailureCodesMXAPIFAILURECODEApi", () => {
  let instance: api.MaximoAPIObjectStructureForFailureCodesMXAPIFAILURECODEApi
  beforeEach(function() {
    instance = new api.MaximoAPIObjectStructureForFailureCodesMXAPIFAILURECODEApi(config)
  });

  test("osMxapifailurecodeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapifailurecodeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapifailurecodeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapifailurecodeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapifailurecodeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapifailurecodeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapifailurecodeIdPost", () => {
    const body: api.RESOURCEMXAPIFAILURECODE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapifailurecodeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapifailurecodePost", () => {
    const body: api.RESOURCEMXAPIFAILURECODE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapifailurecodePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIObjectStructureForInsightFactorsMXAPIINSIGHTFACTORApi", () => {
  let instance: api.MaximoAPIObjectStructureForInsightFactorsMXAPIINSIGHTFACTORApi
  beforeEach(function() {
    instance = new api.MaximoAPIObjectStructureForInsightFactorsMXAPIINSIGHTFACTORApi(config)
  });

  test("osMxapiinsightfactorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinsightfactorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinsightfactorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinsightfactorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinsightfactorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinsightfactorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinsightfactorIdPost", () => {
    const body: api.RESOURCEMXAPIINSIGHTFACTOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinsightfactorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinsightfactorPost", () => {
    const body: api.RESOURCEMXAPIINSIGHTFACTOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinsightfactorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIObjectStructureForMethodologyMXAPIAHMETHODOLOGYApi", () => {
  let instance: api.MaximoAPIObjectStructureForMethodologyMXAPIAHMETHODOLOGYApi
  beforeEach(function() {
    instance = new api.MaximoAPIObjectStructureForMethodologyMXAPIAHMETHODOLOGYApi(config)
  });

  test("osMxapiahmethodologyGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiahmethodologyGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiahmethodologyIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiahmethodologyIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiahmethodologyIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiahmethodologyIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiahmethodologyIdPost", () => {
    const body: api.RESOURCEMXAPIAHMETHODOLOGY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiahmethodologyIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiahmethodologyPost", () => {
    const body: api.RESOURCEMXAPIAHMETHODOLOGY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiahmethodologyPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoAPIToRetrieveMeterDataMXAPIMETERApi", () => {
  let instance: api.MaximoAPIToRetrieveMeterDataMXAPIMETERApi
  beforeEach(function() {
    instance = new api.MaximoAPIToRetrieveMeterDataMXAPIMETERApi(config)
  });

  test("osMxapimeterGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapimeterGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapimeterIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapimeterIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapimeterIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapimeterIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapimeterIdPost", () => {
    const body: api.RESOURCEMXAPIMETER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimeterIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapimeterPost", () => {
    const body: api.RESOURCEMXAPIMETER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapimeterPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoCompaniesINFromFusionVendorWTOCFMXVENDORApi", () => {
  let instance: api.MaximoCompaniesINFromFusionVendorWTOCFMXVENDORApi
  beforeEach(function() {
    instance = new api.MaximoCompaniesINFromFusionVendorWTOCFMXVENDORApi(config)
  });

  test("osWtOcfMxvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxvendorIdPost", () => {
    const body: api.RESOURCEWTOCFMXVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxvendorPost", () => {
    const body: api.RESOURCEWTOCFMXVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoCompaniesINFromPeopleSoftVendorWTMXVENDORApi", () => {
  let instance: api.MaximoCompaniesINFromPeopleSoftVendorWTMXVENDORApi
  beforeEach(function() {
    instance = new api.MaximoCompaniesINFromPeopleSoftVendorWTMXVENDORApi(config)
  });

  test("osWtMxvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxvendorIdPost", () => {
    const body: api.RESOURCEWTMXVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxvendorPost", () => {
    const body: api.RESOURCEWTMXVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoInventoryUsageObjectStructureMXINVUSEApi", () => {
  let instance: api.MaximoInventoryUsageObjectStructureMXINVUSEApi
  beforeEach(function() {
    instance = new api.MaximoInventoryUsageObjectStructureMXINVUSEApi(config)
  });

  test("osMxinvuseGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxinvuseGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxinvuseIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxinvuseIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxinvuseIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxinvuseIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxinvuseIdPost", () => {
    const body: api.RESOURCEMXINVUSE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvuseIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxinvusePost", () => {
    const body: api.RESOURCEMXINVUSE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxinvusePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoItemToFusionWTOCFMXITEMApi", () => {
  let instance: api.MaximoItemToFusionWTOCFMXITEMApi
  beforeEach(function() {
    instance = new api.MaximoItemToFusionWTOCFMXITEMApi(config)
  });

  test("osWtOcfMxitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxitemIdPost", () => {
    const body: api.RESOURCEWTOCFMXITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxitemPost", () => {
    const body: api.RESOURCEWTOCFMXITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoItemVendorToFusionWTOCFMXINVVENDORApi", () => {
  let instance: api.MaximoItemVendorToFusionWTOCFMXINVVENDORApi
  beforeEach(function() {
    instance = new api.MaximoItemVendorToFusionWTOCFMXINVVENDORApi(config)
  });

  test("osWtOcfMxinvvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxinvvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvvendorIdPost", () => {
    const body: api.RESOURCEWTOCFMXINVVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxinvvendorPost", () => {
    const body: api.RESOURCEWTOCFMXINVVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxinvvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoPRInFromOracleFusionWTOCFMXPRINApi", () => {
  let instance: api.MaximoPRInFromOracleFusionWTOCFMXPRINApi
  beforeEach(function() {
    instance = new api.MaximoPRInFromOracleFusionWTOCFMXPRINApi(config)
  });

  test("osWtOcfMxprinGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxprinGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxprinIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxprinIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxprinIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxprinIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxprinIdPost", () => {
    const body: api.RESOURCEWTOCFMXPRIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxprinIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxprinPost", () => {
    const body: api.RESOURCEWTOCFMXPRIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxprinPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoPRInFromPsoftWTMXPRINApi", () => {
  let instance: api.MaximoPRInFromPsoftWTMXPRINApi
  beforeEach(function() {
    instance = new api.MaximoPRInFromPsoftWTMXPRINApi(config)
  });

  test("osWtMxprinGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxprinGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxprinIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxprinIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxprinIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxprinIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxprinIdPost", () => {
    const body: api.RESOURCEWTMXPRIN = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxprinIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxprinPost", () => {
    const body: api.RESOURCEWTMXPRIN = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxprinPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoPROUTToOracleFusionWTOCFMXPROUTApi", () => {
  let instance: api.MaximoPROUTToOracleFusionWTOCFMXPROUTApi
  beforeEach(function() {
    instance = new api.MaximoPROUTToOracleFusionWTOCFMXPROUTApi(config)
  });

  test("osWtOcfMxproutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxproutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxproutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxproutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxproutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxproutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxproutIdPost", () => {
    const body: api.RESOURCEWTOCFMXPROUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxproutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxproutPost", () => {
    const body: api.RESOURCEWTOCFMXPROUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxproutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoPROUTToPeopleSoftWTMXPROUTApi", () => {
  let instance: api.MaximoPROUTToPeopleSoftWTMXPROUTApi
  beforeEach(function() {
    instance = new api.MaximoPROUTToPeopleSoftWTMXPROUTApi(config)
  });

  test("osWtMxproutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxproutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxproutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxproutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxproutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxproutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxproutIdPost", () => {
    const body: api.RESOURCEWTMXPROUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxproutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxproutPost", () => {
    const body: api.RESOURCEWTMXPROUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxproutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoReceiptINFromFusionRotatingItemMXTESTApi", () => {
  let instance: api.MaximoReceiptINFromFusionRotatingItemMXTESTApi
  beforeEach(function() {
    instance = new api.MaximoReceiptINFromFusionRotatingItemMXTESTApi(config)
  });

  test("osMxTestGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxTestGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxTestIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxTestIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxTestIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxTestIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxTestIdPost", () => {
    const body: api.RESOURCEMXTEST = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxTestIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxTestPost", () => {
    const body: api.RESOURCEMXTEST = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxTestPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoReceiptINFromFusionRotatingItemWTOCFMXRCVROTITMApi", () => {
  let instance: api.MaximoReceiptINFromFusionRotatingItemWTOCFMXRCVROTITMApi
  beforeEach(function() {
    instance = new api.MaximoReceiptINFromFusionRotatingItemWTOCFMXRCVROTITMApi(config)
  });

  test("osWtOcfMxrcvrotitmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxrcvrotitmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxrcvrotitmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxrcvrotitmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxrcvrotitmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxrcvrotitmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxrcvrotitmIdPost", () => {
    const body: api.RESOURCEWTOCFMXRCVROTITM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxrcvrotitmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxrcvrotitmPost", () => {
    const body: api.RESOURCEWTOCFMXRCVROTITM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxrcvrotitmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoReceiptINFromPeopleSoftRotatingItemWTMXRCVROTITMApi", () => {
  let instance: api.MaximoReceiptINFromPeopleSoftRotatingItemWTMXRCVROTITMApi
  beforeEach(function() {
    instance = new api.MaximoReceiptINFromPeopleSoftRotatingItemWTMXRCVROTITMApi(config)
  });

  test("osWtMxrcvrotitmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxrcvrotitmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxrcvrotitmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxrcvrotitmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxrcvrotitmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxrcvrotitmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxrcvrotitmIdPost", () => {
    const body: api.RESOURCEWTMXRCVROTITM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxrcvrotitmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxrcvrotitmPost", () => {
    const body: api.RESOURCEWTMXRCVROTITM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxrcvrotitmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoReceiptsINFromFusionWTOCFMXRECEIPTApi", () => {
  let instance: api.MaximoReceiptsINFromFusionWTOCFMXRECEIPTApi
  beforeEach(function() {
    instance = new api.MaximoReceiptsINFromFusionWTOCFMXRECEIPTApi(config)
  });

  test("osWtOcfMxreceiptGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxreceiptGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxreceiptIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxreceiptIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxreceiptIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxreceiptIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxreceiptIdPost", () => {
    const body: api.RESOURCEWTOCFMXRECEIPT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxreceiptIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxreceiptPost", () => {
    const body: api.RESOURCEWTOCFMXRECEIPT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxreceiptPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoReceiptsINFromPeopleSoftWTMXRECEIPTApi", () => {
  let instance: api.MaximoReceiptsINFromPeopleSoftWTMXRECEIPTApi
  beforeEach(function() {
    instance = new api.MaximoReceiptsINFromPeopleSoftWTMXRECEIPTApi(config)
  });

  test("osWtMxreceiptGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxreceiptGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxreceiptIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxreceiptIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxreceiptIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxreceiptIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxreceiptIdPost", () => {
    const body: api.RESOURCEWTMXRECEIPT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxreceiptIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxreceiptPost", () => {
    const body: api.RESOURCEWTMXRECEIPT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxreceiptPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoTableForGraphiteApplicationStorageOSLCMAFAPPDATAApi", () => {
  let instance: api.MaximoTableForGraphiteApplicationStorageOSLCMAFAPPDATAApi
  beforeEach(function() {
    instance = new api.MaximoTableForGraphiteApplicationStorageOSLCMAFAPPDATAApi(config)
  });

  test("osOslcmafappdataGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osOslcmafappdataGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osOslcmafappdataIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osOslcmafappdataIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osOslcmafappdataIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osOslcmafappdataIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osOslcmafappdataIdPost", () => {
    const body: api.RESOURCEOSLCMAFAPPDATA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osOslcmafappdataIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osOslcmafappdataPost", () => {
    const body: api.RESOURCEOSLCMAFAPPDATA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osOslcmafappdataPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoTableForUserSpecificComponentConfigurationsMXAPISTATEMANAGERApi", () => {
  let instance: api.MaximoTableForUserSpecificComponentConfigurationsMXAPISTATEMANAGERApi
  beforeEach(function() {
    instance = new api.MaximoTableForUserSpecificComponentConfigurationsMXAPISTATEMANAGERApi(config)
  });

  test("osMxapistatemanagerGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapistatemanagerGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapistatemanagerIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapistatemanagerIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapistatemanagerIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapistatemanagerIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapistatemanagerIdPost", () => {
    const body: api.RESOURCEMXAPISTATEMANAGER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapistatemanagerIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapistatemanagerPost", () => {
    const body: api.RESOURCEMXAPISTATEMANAGER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapistatemanagerPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MaximoTableForUserSpecificComponentViewConfigurationsMXAPIVIEWMANAGERApi", () => {
  let instance: api.MaximoTableForUserSpecificComponentViewConfigurationsMXAPIVIEWMANAGERApi
  beforeEach(function() {
    instance = new api.MaximoTableForUserSpecificComponentViewConfigurationsMXAPIVIEWMANAGERApi(config)
  });

  test("osMxapiviewmanagerGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiviewmanagerGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiviewmanagerIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiviewmanagerIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiviewmanagerIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiviewmanagerIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiviewmanagerIdPost", () => {
    const body: api.RESOURCEMXAPIVIEWMANAGER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiviewmanagerIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiviewmanagerPost", () => {
    const body: api.RESOURCEMXAPIVIEWMANAGER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiviewmanagerPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("MeterReadingDefinitionMXMETERDATAApi", () => {
  let instance: api.MeterReadingDefinitionMXMETERDATAApi
  beforeEach(function() {
    instance = new api.MeterReadingDefinitionMXMETERDATAApi(config)
  });

  test("osMxmeterdataGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxmeterdataGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxmeterdataIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxmeterdataIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxmeterdataIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxmeterdataIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxmeterdataIdPost", () => {
    const body: api.RESOURCEMXMETERDATA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxmeterdataIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxmeterdataPost", () => {
    const body: api.RESOURCEMXMETERDATA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxmeterdataPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ModelConfigurationRulesPLUSAMXCMAPPLEApi", () => {
  let instance: api.ModelConfigurationRulesPLUSAMXCMAPPLEApi
  beforeEach(function() {
    instance = new api.ModelConfigurationRulesPLUSAMXCMAPPLEApi(config)
  });

  test("osPlusamxcmappleGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmappleGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmappleIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcmappleIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcmappleIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmappleIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmappleIdPost", () => {
    const body: api.RESOURCEPLUSAMXCMAPPLE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmappleIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmapplePost", () => {
    const body: api.RESOURCEPLUSAMXCMAPPLE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmapplePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ModelDefinitionPLUSAMXMODELApi", () => {
  let instance: api.ModelDefinitionPLUSAMXMODELApi
  beforeEach(function() {
    instance = new api.ModelDefinitionPLUSAMXMODELApi(config)
  });

  test("osPlusamxmodelGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxmodelGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmodelIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxmodelIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxmodelIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxmodelIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmodelIdPost", () => {
    const body: api.RESOURCEPLUSAMXMODEL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxmodelIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxmodelPost", () => {
    const body: api.RESOURCEPLUSAMXMODEL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxmodelPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ModelFlagRulesPLUSAMXCMFLAGApi", () => {
  let instance: api.ModelFlagRulesPLUSAMXCMFLAGApi
  beforeEach(function() {
    instance = new api.ModelFlagRulesPLUSAMXCMFLAGApi(config)
  });

  test("osPlusamxcmflagGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmflagGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmflagIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxcmflagIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxcmflagIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxcmflagIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmflagIdPost", () => {
    const body: api.RESOURCEPLUSAMXCMFLAG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmflagIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxcmflagPost", () => {
    const body: api.RESOURCEPLUSAMXCMFLAG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxcmflagPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ModelSystemsPLUSAMXSYSBUILDApi", () => {
  let instance: api.ModelSystemsPLUSAMXSYSBUILDApi
  beforeEach(function() {
    instance = new api.ModelSystemsPLUSAMXSYSBUILDApi(config)
  });

  test("osPlusamxsysbuildGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxsysbuildGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxsysbuildIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxsysbuildIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxsysbuildIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxsysbuildIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxsysbuildIdPost", () => {
    const body: api.RESOURCEPLUSAMXSYSBUILD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxsysbuildIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxsysbuildPost", () => {
    const body: api.RESOURCEPLUSAMXSYSBUILD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxsysbuildPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("NewAssetAssemblyDefinitionPLUSAMXNEWASSETApi", () => {
  let instance: api.NewAssetAssemblyDefinitionPLUSAMXNEWASSETApi
  beforeEach(function() {
    instance = new api.NewAssetAssemblyDefinitionPLUSAMXNEWASSETApi(config)
  });

  test("osPlusamxnewassetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxnewassetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxnewassetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxnewassetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxnewassetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxnewassetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxnewassetIdPost", () => {
    const body: api.RESOURCEPLUSAMXNEWASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxnewassetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxnewassetPost", () => {
    const body: api.RESOURCEPLUSAMXNEWASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxnewassetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OCFDepartmentWTOCFDEPARTMENTOSApi", () => {
  let instance: api.OCFDepartmentWTOCFDEPARTMENTOSApi
  beforeEach(function() {
    instance = new api.OCFDepartmentWTOCFDEPARTMENTOSApi(config)
  });

  test("osWtOcfDepartmentOsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfDepartmentOsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfDepartmentOsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfDepartmentOsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfDepartmentOsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfDepartmentOsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfDepartmentOsIdPost", () => {
    const body: api.RESOURCEWTOCFDEPARTMENTOS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfDepartmentOsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfDepartmentOsPost", () => {
    const body: api.RESOURCEWTOCFDEPARTMENTOS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfDepartmentOsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OCFEmployeeWTOCFEMPLOYEEOSApi", () => {
  let instance: api.OCFEmployeeWTOCFEMPLOYEEOSApi
  beforeEach(function() {
    instance = new api.OCFEmployeeWTOCFEMPLOYEEOSApi(config)
  });

  test("osWtOcfEmployeeOsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfEmployeeOsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfEmployeeOsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfEmployeeOsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfEmployeeOsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfEmployeeOsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfEmployeeOsIdPost", () => {
    const body: api.RESOURCEWTOCFEMPLOYEEOS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfEmployeeOsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfEmployeeOsPost", () => {
    const body: api.RESOURCEWTOCFEMPLOYEEOS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfEmployeeOsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OCFJobDetailsWTOCFJOBDETAILSOSApi", () => {
  let instance: api.OCFJobDetailsWTOCFJOBDETAILSOSApi
  beforeEach(function() {
    instance = new api.OCFJobDetailsWTOCFJOBDETAILSOSApi(config)
  });

  test("osWtOcfJobdetailsOsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfJobdetailsOsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfJobdetailsOsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfJobdetailsOsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfJobdetailsOsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfJobdetailsOsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfJobdetailsOsIdPost", () => {
    const body: api.RESOURCEWTOCFJOBDETAILSOS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfJobdetailsOsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfJobdetailsOsPost", () => {
    const body: api.RESOURCEWTOCFJOBDETAILSOS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfJobdetailsOsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OCFJobDetailsWTTEST2Api", () => {
  let instance: api.OCFJobDetailsWTTEST2Api
  beforeEach(function() {
    instance = new api.OCFJobDetailsWTTEST2Api(config)
  });

  test("osWtTest2Get", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtTest2Get(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtTest2IdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtTest2IdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtTest2IdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtTest2IdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtTest2IdPost", () => {
    const body: api.RESOURCEWTTEST2 = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTest2IdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtTest2Post", () => {
    const body: api.RESOURCEWTTEST2 = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTest2Post(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OCFLocationWTOCFLOCATIONOSApi", () => {
  let instance: api.OCFLocationWTOCFLOCATIONOSApi
  beforeEach(function() {
    instance = new api.OCFLocationWTOCFLOCATIONOSApi(config)
  });

  test("osWtOcfLocationOsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfLocationOsGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfLocationOsIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfLocationOsIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfLocationOsIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfLocationOsIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfLocationOsIdPost", () => {
    const body: api.RESOURCEWTOCFLOCATIONOS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfLocationOsIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfLocationOsPost", () => {
    const body: api.RESOURCEWTOCFLOCATIONOS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfLocationOsPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OMPDefinitionMXOMPApi", () => {
  let instance: api.OMPDefinitionMXOMPApi
  beforeEach(function() {
    instance = new api.OMPDefinitionMXOMPApi(config)
  });

  test("osMxompGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxompGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxompIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxompIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxompIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxompIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxompIdPost", () => {
    const body: api.RESOURCEMXOMP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxompIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxompPost", () => {
    const body: api.RESOURCEMXOMP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxompPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OSForConditionMXAPIITEMCONDITIONApi", () => {
  let instance: api.OSForConditionMXAPIITEMCONDITIONApi
  beforeEach(function() {
    instance = new api.OSForConditionMXAPIITEMCONDITIONApi(config)
  });

  test("osMxapiitemconditionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiitemconditionGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiitemconditionIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiitemconditionIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiitemconditionIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiitemconditionIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiitemconditionIdPost", () => {
    const body: api.RESOURCEMXAPIITEMCONDITION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiitemconditionIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiitemconditionPost", () => {
    const body: api.RESOURCEMXAPIITEMCONDITION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiitemconditionPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ObjectStructureForInspectionResultMHINSPECTIONRESApi", () => {
  let instance: api.ObjectStructureForInspectionResultMHINSPECTIONRESApi
  beforeEach(function() {
    instance = new api.ObjectStructureForInspectionResultMHINSPECTIONRESApi(config)
  });

  test("osMhinspectionresGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhinspectionresGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhinspectionresIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhinspectionresIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhinspectionresIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhinspectionresIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhinspectionresIdPost", () => {
    const body: api.RESOURCEMHINSPECTIONRES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhinspectionresIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhinspectionresPost", () => {
    const body: api.RESOURCEMHINSPECTIONRES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhinspectionresPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ObjectStructureForInspectionResultOnNewFrameworkMXAPIINSPECTIONRESApi", () => {
  let instance: api.ObjectStructureForInspectionResultOnNewFrameworkMXAPIINSPECTIONRESApi
  beforeEach(function() {
    instance = new api.ObjectStructureForInspectionResultOnNewFrameworkMXAPIINSPECTIONRESApi(config)
  });

  test("osMxapiinspectionresGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspectionresGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspectionresIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinspectionresIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinspectionresIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinspectionresIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspectionresIdPost", () => {
    const body: api.RESOURCEMXAPIINSPECTIONRES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspectionresIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinspectionresPost", () => {
    const body: api.RESOURCEMXAPIINSPECTIONRES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinspectionresPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OperationLocationDefinitionMHOPERLOCApi", () => {
  let instance: api.OperationLocationDefinitionMHOPERLOCApi
  beforeEach(function() {
    instance = new api.OperationLocationDefinitionMHOPERLOCApi(config)
  });

  test("osMhoperlocGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhoperlocGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhoperlocIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhoperlocIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhoperlocIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhoperlocIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhoperlocIdPost", () => {
    const body: api.RESOURCEMHOPERLOC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhoperlocIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhoperlocPost", () => {
    const body: api.RESOURCEMHOPERLOC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhoperlocPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OperationLocationDefinitionMXOPERLOCApi", () => {
  let instance: api.OperationLocationDefinitionMXOPERLOCApi
  beforeEach(function() {
    instance = new api.OperationLocationDefinitionMXOPERLOCApi(config)
  });

  test("osMxoperlocGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxoperlocGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxoperlocIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxoperlocIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxoperlocIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxoperlocIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxoperlocIdPost", () => {
    const body: api.RESOURCEMXOPERLOC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxoperlocIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxoperlocPost", () => {
    const body: api.RESOURCEMXOPERLOC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxoperlocPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OperationLocationDefinitionWTLOCATIONSHORTApi", () => {
  let instance: api.OperationLocationDefinitionWTLOCATIONSHORTApi
  beforeEach(function() {
    instance = new api.OperationLocationDefinitionWTLOCATIONSHORTApi(config)
  });

  test("osWtLocationshortGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtLocationshortGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtLocationshortIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtLocationshortIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtLocationshortIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtLocationshortIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtLocationshortIdPost", () => {
    const body: api.RESOURCEWTLOCATIONSHORT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtLocationshortIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtLocationshortPost", () => {
    const body: api.RESOURCEWTLOCATIONSHORT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtLocationshortPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OperationLocationDefinitionWTLOCHIERARCHYApi", () => {
  let instance: api.OperationLocationDefinitionWTLOCHIERARCHYApi
  beforeEach(function() {
    instance = new api.OperationLocationDefinitionWTLOCHIERARCHYApi(config)
  });

  test("osWtLochierarchyGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtLochierarchyGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtLochierarchyIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtLochierarchyIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtLochierarchyIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtLochierarchyIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtLochierarchyIdPost", () => {
    const body: api.RESOURCEWTLOCHIERARCHY = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtLochierarchyIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtLochierarchyPost", () => {
    const body: api.RESOURCEWTLOCHIERARCHY = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtLochierarchyPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OptramRelatedRecordObjectStructureWTOPT4RELRECApi", () => {
  let instance: api.OptramRelatedRecordObjectStructureWTOPT4RELRECApi
  beforeEach(function() {
    instance = new api.OptramRelatedRecordObjectStructureWTOPT4RELRECApi(config)
  });

  test("osWtOpt4relrecGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOpt4relrecGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOpt4relrecIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOpt4relrecIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOpt4relrecIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOpt4relrecIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOpt4relrecIdPost", () => {
    const body: api.RESOURCEWTOPT4RELREC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOpt4relrecIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOpt4relrecPost", () => {
    const body: api.RESOURCEWTOPT4RELREC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOpt4relrecPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OptramWorkOrderObjectStructureWTOPT4WOApi", () => {
  let instance: api.OptramWorkOrderObjectStructureWTOPT4WOApi
  beforeEach(function() {
    instance = new api.OptramWorkOrderObjectStructureWTOPT4WOApi(config)
  });

  test("osWtOpt4woGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOpt4woGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOpt4woIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOpt4woIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOpt4woIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOpt4woIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOpt4woIdPost", () => {
    const body: api.RESOURCEWTOPT4WO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOpt4woIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOpt4woPost", () => {
    const body: api.RESOURCEWTOPT4WO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOpt4woPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("OrganizationAndSiteDefinitionMXORGANIZATIONApi", () => {
  let instance: api.OrganizationAndSiteDefinitionMXORGANIZATIONApi
  beforeEach(function() {
    instance = new api.OrganizationAndSiteDefinitionMXORGANIZATIONApi(config)
  });

  test("osMxorganizationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxorganizationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxorganizationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxorganizationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxorganizationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxorganizationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxorganizationIdPost", () => {
    const body: api.RESOURCEMXORGANIZATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxorganizationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxorganizationPost", () => {
    const body: api.RESOURCEMXORGANIZATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxorganizationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PAFItemLoadTemplateTemporaryWTPAFITEMApi", () => {
  let instance: api.PAFItemLoadTemplateTemporaryWTPAFITEMApi
  beforeEach(function() {
    instance = new api.PAFItemLoadTemplateTemporaryWTPAFITEMApi(config)
  });

  test("osWtPafitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtPafitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtPafitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtPafitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtPafitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtPafitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtPafitemIdPost", () => {
    const body: api.RESOURCEWTPAFITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtPafitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtPafitemPost", () => {
    const body: api.RESOURCEWTPAFITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtPafitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PCR92420ExportImportBusAssetsWTBUSASSETApi", () => {
  let instance: api.PCR92420ExportImportBusAssetsWTBUSASSETApi
  beforeEach(function() {
    instance = new api.PCR92420ExportImportBusAssetsWTBUSASSETApi(config)
  });

  test("osWtBusAssetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtBusAssetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtBusAssetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtBusAssetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtBusAssetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtBusAssetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtBusAssetIdPost", () => {
    const body: api.RESOURCEWTBUSASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtBusAssetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtBusAssetPost", () => {
    const body: api.RESOURCEWTBUSASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtBusAssetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PLUSTPOSSOADefinitionWTPLUSTPOSSOAApi", () => {
  let instance: api.PLUSTPOSSOADefinitionWTPLUSTPOSSOAApi
  beforeEach(function() {
    instance = new api.PLUSTPOSSOADefinitionWTPLUSTPOSSOAApi(config)
  });

  test("osWtPlustposSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtPlustposSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtPlustposSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtPlustposSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtPlustposSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtPlustposSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtPlustposSoaIdPost", () => {
    const body: api.RESOURCEWTPLUSTPOSSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtPlustposSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtPlustposSoaPost", () => {
    const body: api.RESOURCEWTPLUSTPOSSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtPlustposSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PMLastDoneNextDuePLUSAMXPMNEXTApi", () => {
  let instance: api.PMLastDoneNextDuePLUSAMXPMNEXTApi
  beforeEach(function() {
    instance = new api.PMLastDoneNextDuePLUSAMXPMNEXTApi(config)
  });

  test("osPlusamxpmnextGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmnextGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmnextIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxpmnextIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxpmnextIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmnextIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmnextIdPost", () => {
    const body: api.RESOURCEPLUSAMXPMNEXT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmnextIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmnextPost", () => {
    const body: api.RESOURCEPLUSAMXPMNEXT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmnextPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PMQMXPMWORKORDERMXPMWORKORDERApi", () => {
  let instance: api.PMQMXPMWORKORDERMXPMWORKORDERApi
  beforeEach(function() {
    instance = new api.PMQMXPMWORKORDERMXPMWORKORDERApi(config)
  });

  test("osMxpmWorkorderGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxpmWorkorderGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxpmWorkorderIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxpmWorkorderIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxpmWorkorderIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxpmWorkorderIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxpmWorkorderIdPost", () => {
    const body: api.RESOURCEMXPMWORKORDER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpmWorkorderIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxpmWorkorderPost", () => {
    const body: api.RESOURCEMXPMWORKORDER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpmWorkorderPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PartiumAssetIntegrationOutboundOnlyMXASSETPARTIUMApi", () => {
  let instance: api.PartiumAssetIntegrationOutboundOnlyMXASSETPARTIUMApi
  beforeEach(function() {
    instance = new api.PartiumAssetIntegrationOutboundOnlyMXASSETPARTIUMApi(config)
  });

  test("osMxassetpartiumGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxassetpartiumGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxassetpartiumIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxassetpartiumIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxassetpartiumIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxassetpartiumIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxassetpartiumIdPost", () => {
    const body: api.RESOURCEMXASSETPARTIUM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxassetpartiumIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxassetpartiumPost", () => {
    const body: api.RESOURCEMXASSETPARTIUM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxassetpartiumPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PartiumItemIntegrationOutboundOnlyMXITEMPARTIUMApi", () => {
  let instance: api.PartiumItemIntegrationOutboundOnlyMXITEMPARTIUMApi
  beforeEach(function() {
    instance = new api.PartiumItemIntegrationOutboundOnlyMXITEMPARTIUMApi(config)
  });

  test("osMxitempartiumGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxitempartiumGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxitempartiumIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxitempartiumIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxitempartiumIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxitempartiumIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxitempartiumIdPost", () => {
    const body: api.RESOURCEMXITEMPARTIUM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxitempartiumIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxitempartiumPost", () => {
    const body: api.RESOURCEMXITEMPARTIUM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxitempartiumPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PeopleSoftItemWTMXITEMApi", () => {
  let instance: api.PeopleSoftItemWTMXITEMApi
  beforeEach(function() {
    instance = new api.PeopleSoftItemWTMXITEMApi(config)
  });

  test("osWtMxitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxitemIdPost", () => {
    const body: api.RESOURCEWTMXITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxitemPost", () => {
    const body: api.RESOURCEWTMXITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PersonDefinitionMXPERSONApi", () => {
  let instance: api.PersonDefinitionMXPERSONApi
  beforeEach(function() {
    instance = new api.PersonDefinitionMXPERSONApi(config)
  });

  test("osMxpersonGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxpersonGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxpersonIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxpersonIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxpersonIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxpersonIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxpersonIdPost", () => {
    const body: api.RESOURCEMXPERSON = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpersonIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxpersonPost", () => {
    const body: api.RESOURCEMXPERSON = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpersonPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PersonGroupsMxLoaderMXLPERGRPApi", () => {
  let instance: api.PersonGroupsMxLoaderMXLPERGRPApi
  beforeEach(function() {
    instance = new api.PersonGroupsMxLoaderMXLPERGRPApi(config)
  });

  test("osMxlPergrpGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlPergrpGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlPergrpIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlPergrpIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlPergrpIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlPergrpIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlPergrpIdPost", () => {
    const body: api.RESOURCEMXLPERGRP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlPergrpIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlPergrpPost", () => {
    const body: api.RESOURCEMXLPERGRP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlPergrpPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PersonUserDefinitionMXPERUSERApi", () => {
  let instance: api.PersonUserDefinitionMXPERUSERApi
  beforeEach(function() {
    instance = new api.PersonUserDefinitionMXPERUSERApi(config)
  });

  test("osMxperuserGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxperuserGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxperuserIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxperuserIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxperuserIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxperuserIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxperuserIdPost", () => {
    const body: api.RESOURCEMXPERUSER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxperuserIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxperuserPost", () => {
    const body: api.RESOURCEMXPERUSER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxperuserPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PicklistListDefinitionMXAPIINVPICKLISTApi", () => {
  let instance: api.PicklistListDefinitionMXAPIINVPICKLISTApi
  beforeEach(function() {
    instance = new api.PicklistListDefinitionMXAPIINVPICKLISTApi(config)
  });

  test("osMxapiinvpicklistGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvpicklistGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvpicklistIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiinvpicklistIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiinvpicklistIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiinvpicklistIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvpicklistIdPost", () => {
    const body: api.RESOURCEMXAPIINVPICKLIST = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvpicklistIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiinvpicklistPost", () => {
    const body: api.RESOURCEMXAPIINVPICKLIST = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiinvpicklistPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PreventiveMaintenanceMxLoaderMXLPMApi", () => {
  let instance: api.PreventiveMaintenanceMxLoaderMXLPMApi
  beforeEach(function() {
    instance = new api.PreventiveMaintenanceMxLoaderMXLPMApi(config)
  });

  test("osMxlPmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlPmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlPmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlPmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlPmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlPmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlPmIdPost", () => {
    const body: api.RESOURCEMXLPM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlPmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlPmPost", () => {
    const body: api.RESOURCEMXLPM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlPmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PreventiveMaintenanceMxLoaderWTMXLPMApi", () => {
  let instance: api.PreventiveMaintenanceMxLoaderWTMXLPMApi
  beforeEach(function() {
    instance = new api.PreventiveMaintenanceMxLoaderWTMXLPMApi(config)
  });

  test("osWtMxlPmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxlPmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxlPmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxlPmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxlPmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxlPmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxlPmIdPost", () => {
    const body: api.RESOURCEWTMXLPM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxlPmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxlPmPost", () => {
    const body: api.RESOURCEWTMXLPM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxlPmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PreventiveMaintenancePMDefinitionPLUSAMXPMApi", () => {
  let instance: api.PreventiveMaintenancePMDefinitionPLUSAMXPMApi
  beforeEach(function() {
    instance = new api.PreventiveMaintenancePMDefinitionPLUSAMXPMApi(config)
  });

  test("osPlusamxpmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxpmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxpmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmIdPost", () => {
    const body: api.RESOURCEPLUSAMXPM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmPost", () => {
    const body: api.RESOURCEPLUSAMXPM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PreventiveMaintenancePMGroupsDefinitionPLUSAMXPMGROUPApi", () => {
  let instance: api.PreventiveMaintenancePMGroupsDefinitionPLUSAMXPMGROUPApi
  beforeEach(function() {
    instance = new api.PreventiveMaintenancePMGroupsDefinitionPLUSAMXPMGROUPApi(config)
  });

  test("osPlusamxpmgroupGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgroupGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgroupIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxpmgroupIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgroupIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgroupIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgroupIdPost", () => {
    const body: api.RESOURCEPLUSAMXPMGROUP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgroupIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgroupPost", () => {
    const body: api.RESOURCEPLUSAMXPMGROUP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgroupPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PreventiveMaintenancePMGroupsDefinitionPLUSAMXPMGROUPREFApi", () => {
  let instance: api.PreventiveMaintenancePMGroupsDefinitionPLUSAMXPMGROUPREFApi
  beforeEach(function() {
    instance = new api.PreventiveMaintenancePMGroupsDefinitionPLUSAMXPMGROUPREFApi(config)
  });

  test("osPlusamxpmgrouprefGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgrouprefGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgrouprefIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxpmgrouprefIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgrouprefIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgrouprefIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgrouprefIdPost", () => {
    const body: api.RESOURCEPLUSAMXPMGROUPREF = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgrouprefIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpmgrouprefPost", () => {
    const body: api.RESOURCEPLUSAMXPMGROUPREF = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpmgrouprefPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ProblemDefinitionMXPROBLEMApi", () => {
  let instance: api.ProblemDefinitionMXPROBLEMApi
  beforeEach(function() {
    instance = new api.ProblemDefinitionMXPROBLEMApi(config)
  });

  test("osMxproblemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxproblemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxproblemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxproblemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxproblemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxproblemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxproblemIdPost", () => {
    const body: api.RESOURCEMXPROBLEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxproblemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxproblemPost", () => {
    const body: api.RESOURCEMXPROBLEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxproblemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PropertiesDefinitionMXPROPApi", () => {
  let instance: api.PropertiesDefinitionMXPROPApi
  beforeEach(function() {
    instance = new api.PropertiesDefinitionMXPROPApi(config)
  });

  test("osMxpropGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxpropGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxpropIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxpropIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxpropIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxpropIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxpropIdPost", () => {
    const body: api.RESOURCEMXPROP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpropIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxpropPost", () => {
    const body: api.RESOURCEMXPROP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpropPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PurchaseContractDefinitionMXPCApi", () => {
  let instance: api.PurchaseContractDefinitionMXPCApi
  beforeEach(function() {
    instance = new api.PurchaseContractDefinitionMXPCApi(config)
  });

  test("osMxpcGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxpcGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxpcIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxpcIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxpcIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxpcIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxpcIdPost", () => {
    const body: api.RESOURCEMXPC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpcIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxpcPost", () => {
    const body: api.RESOURCEMXPC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpcPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PurchaseOrderDefinitionMXPOApi", () => {
  let instance: api.PurchaseOrderDefinitionMXPOApi
  beforeEach(function() {
    instance = new api.PurchaseOrderDefinitionMXPOApi(config)
  });

  test("osMxpoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxpoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxpoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxpoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxpoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxpoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxpoIdPost", () => {
    const body: api.RESOURCEMXPO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxpoPost", () => {
    const body: api.RESOURCEMXPO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxpoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PurchaseOrderDefinitionPLUSAMXPOApi", () => {
  let instance: api.PurchaseOrderDefinitionPLUSAMXPOApi
  beforeEach(function() {
    instance = new api.PurchaseOrderDefinitionPLUSAMXPOApi(config)
  });

  test("osPlusamxpoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxpoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxpoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxpoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpoIdPost", () => {
    const body: api.RESOURCEPLUSAMXPO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxpoPost", () => {
    const body: api.RESOURCEPLUSAMXPO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxpoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PurchaseRequisitionDefinitionMXPRApi", () => {
  let instance: api.PurchaseRequisitionDefinitionMXPRApi
  beforeEach(function() {
    instance = new api.PurchaseRequisitionDefinitionMXPRApi(config)
  });

  test("osMxprGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxprGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxprIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxprIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxprIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxprIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxprIdPost", () => {
    const body: api.RESOURCEMXPR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxprIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxprPost", () => {
    const body: api.RESOURCEMXPR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxprPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("PurchaseRequisitionDefinitionPLUSAMXPRApi", () => {
  let instance: api.PurchaseRequisitionDefinitionPLUSAMXPRApi
  beforeEach(function() {
    instance = new api.PurchaseRequisitionDefinitionPLUSAMXPRApi(config)
  });

  test("osPlusamxprGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxprGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxprIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxprIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxprIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxprIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxprIdPost", () => {
    const body: api.RESOURCEPLUSAMXPR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxprIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxprPost", () => {
    const body: api.RESOURCEPLUSAMXPR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxprPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ReceiptForRotatingItemDefinitionMXRCVROTITMApi", () => {
  let instance: api.ReceiptForRotatingItemDefinitionMXRCVROTITMApi
  beforeEach(function() {
    instance = new api.ReceiptForRotatingItemDefinitionMXRCVROTITMApi(config)
  });

  test("osMxrcvrotitmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxrcvrotitmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxrcvrotitmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxrcvrotitmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxrcvrotitmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxrcvrotitmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxrcvrotitmIdPost", () => {
    const body: api.RESOURCEMXRCVROTITM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxrcvrotitmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxrcvrotitmPost", () => {
    const body: api.RESOURCEMXRCVROTITM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxrcvrotitmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ReceiptsDefinitionMXRECEIPTApi", () => {
  let instance: api.ReceiptsDefinitionMXRECEIPTApi
  beforeEach(function() {
    instance = new api.ReceiptsDefinitionMXRECEIPTApi(config)
  });

  test("osMxreceiptGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxreceiptGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxreceiptIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxreceiptIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxreceiptIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxreceiptIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxreceiptIdPost", () => {
    const body: api.RESOURCEMXRECEIPT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxreceiptIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxreceiptPost", () => {
    const body: api.RESOURCEMXRECEIPT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxreceiptPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("RelatedRecordObjectStructureWTRELATEDRECORDSOAApi", () => {
  let instance: api.RelatedRecordObjectStructureWTRELATEDRECORDSOAApi
  beforeEach(function() {
    instance = new api.RelatedRecordObjectStructureWTRELATEDRECORDSOAApi(config)
  });

  test("osWtRelatedrecordSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtRelatedrecordSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtRelatedrecordSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtRelatedrecordSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtRelatedrecordSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtRelatedrecordSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtRelatedrecordSoaIdPost", () => {
    const body: api.RESOURCEWTRELATEDRECORDSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtRelatedrecordSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtRelatedrecordSoaPost", () => {
    const body: api.RESOURCEWTRELATEDRECORDSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtRelatedrecordSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("RequestForQuotationDefinitionPLUSAMXRFQApi", () => {
  let instance: api.RequestForQuotationDefinitionPLUSAMXRFQApi
  beforeEach(function() {
    instance = new api.RequestForQuotationDefinitionPLUSAMXRFQApi(config)
  });

  test("osPlusamxrfqGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxrfqGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrfqIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxrfqIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxrfqIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxrfqIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrfqIdPost", () => {
    const body: api.RESOURCEPLUSAMXRFQ = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxrfqIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrfqPost", () => {
    const body: api.RESOURCEPLUSAMXRFQ = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxrfqPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("RolesAndCapabilitiesPLUSAMXROLECAPApi", () => {
  let instance: api.RolesAndCapabilitiesPLUSAMXROLECAPApi
  beforeEach(function() {
    instance = new api.RolesAndCapabilitiesPLUSAMXROLECAPApi(config)
  });

  test("osPlusamxrolecapGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecapGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecapIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxrolecapIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecapIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecapIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecapIdPost", () => {
    const body: api.RESOURCEPLUSAMXROLECAP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecapIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecapPost", () => {
    const body: api.RESOURCEPLUSAMXROLECAP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecapPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("RolesAndCapabiltiesRelationshipPLUSAMXROLECAPRELApi", () => {
  let instance: api.RolesAndCapabiltiesRelationshipPLUSAMXROLECAPRELApi
  beforeEach(function() {
    instance = new api.RolesAndCapabiltiesRelationshipPLUSAMXROLECAPRELApi(config)
  });

  test("osPlusamxrolecaprelGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecaprelGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecaprelIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxrolecaprelIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecaprelIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecaprelIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecaprelIdPost", () => {
    const body: api.RESOURCEPLUSAMXROLECAPREL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecaprelIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxrolecaprelPost", () => {
    const body: api.RESOURCEPLUSAMXROLECAPREL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxrolecaprelPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("RoutesAndRouteStopsObjectStructureMXAPIROUTESApi", () => {
  let instance: api.RoutesAndRouteStopsObjectStructureMXAPIROUTESApi
  beforeEach(function() {
    instance = new api.RoutesAndRouteStopsObjectStructureMXAPIROUTESApi(config)
  });

  test("osMxapiroutesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiroutesGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiroutesIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiroutesIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiroutesIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiroutesIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiroutesIdPost", () => {
    const body: api.RESOURCEMXAPIROUTES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiroutesIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiroutesPost", () => {
    const body: api.RESOURCEMXAPIROUTES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiroutesPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("RoutesMxLoaderMXLROUTESApi", () => {
  let instance: api.RoutesMxLoaderMXLROUTESApi
  beforeEach(function() {
    instance = new api.RoutesMxLoaderMXLROUTESApi(config)
  });

  test("osMxlRoutesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlRoutesGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlRoutesIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlRoutesIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlRoutesIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlRoutesIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlRoutesIdPost", () => {
    const body: api.RESOURCEMXLROUTES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlRoutesIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlRoutesPost", () => {
    const body: api.RESOURCEMXLROUTES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlRoutesPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SeriesDefinitionPLUSAMXSERIESApi", () => {
  let instance: api.SeriesDefinitionPLUSAMXSERIESApi
  beforeEach(function() {
    instance = new api.SeriesDefinitionPLUSAMXSERIESApi(config)
  });

  test("osPlusamxseriesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxseriesGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxseriesIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxseriesIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxseriesIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxseriesIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxseriesIdPost", () => {
    const body: api.RESOURCEPLUSAMXSERIES = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxseriesIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxseriesPost", () => {
    const body: api.RESOURCEPLUSAMXSERIES = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxseriesPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ServiceAddressMXSRVADApi", () => {
  let instance: api.ServiceAddressMXSRVADApi
  beforeEach(function() {
    instance = new api.ServiceAddressMXSRVADApi(config)
  });

  test("osMxsrvadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxsrvadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxsrvadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxsrvadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxsrvadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxsrvadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxsrvadIdPost", () => {
    const body: api.RESOURCEMXSRVAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxsrvadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxsrvadPost", () => {
    const body: api.RESOURCEMXSRVAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxsrvadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ServiceItemsDefinitionMXSERVITEMApi", () => {
  let instance: api.ServiceItemsDefinitionMXSERVITEMApi
  beforeEach(function() {
    instance = new api.ServiceItemsDefinitionMXSERVITEMApi(config)
  });

  test("osMxservitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxservitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxservitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxservitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxservitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxservitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxservitemIdPost", () => {
    const body: api.RESOURCEMXSERVITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxservitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxservitemPost", () => {
    const body: api.RESOURCEMXSERVITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxservitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ServiceRequestDefinitionForSOAWTMXSRSOAApi", () => {
  let instance: api.ServiceRequestDefinitionForSOAWTMXSRSOAApi
  beforeEach(function() {
    instance = new api.ServiceRequestDefinitionForSOAWTMXSRSOAApi(config)
  });

  test("osWtMxsrSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxsrSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxsrSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxsrSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxsrSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxsrSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxsrSoaIdPost", () => {
    const body: api.RESOURCEWTMXSRSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxsrSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxsrSoaPost", () => {
    const body: api.RESOURCEWTMXSRSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxsrSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ServiceRequestDefinitionMXSRApi", () => {
  let instance: api.ServiceRequestDefinitionMXSRApi
  beforeEach(function() {
    instance = new api.ServiceRequestDefinitionMXSRApi(config)
  });

  test("osMxsrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxsrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxsrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxsrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxsrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxsrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxsrIdPost", () => {
    const body: api.RESOURCEMXSR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxsrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxsrPost", () => {
    const body: api.RESOURCEMXSR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxsrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SpecificationAttributesMxLoaderMXLASSETATTRIBUTEApi", () => {
  let instance: api.SpecificationAttributesMxLoaderMXLASSETATTRIBUTEApi
  beforeEach(function() {
    instance = new api.SpecificationAttributesMxLoaderMXLASSETATTRIBUTEApi(config)
  });

  test("osMxlAssetattributeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlAssetattributeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlAssetattributeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlAssetattributeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlAssetattributeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlAssetattributeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlAssetattributeIdPost", () => {
    const body: api.RESOURCEMXLASSETATTRIBUTE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlAssetattributeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlAssetattributePost", () => {
    const body: api.RESOURCEMXLASSETATTRIBUTE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlAssetattributePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("StoreroomInventoryLoadWTSRINVLOADApi", () => {
  let instance: api.StoreroomInventoryLoadWTSRINVLOADApi
  beforeEach(function() {
    instance = new api.StoreroomInventoryLoadWTSRINVLOADApi(config)
  });

  test("osWtSrinvloadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtSrinvloadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtSrinvloadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtSrinvloadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtSrinvloadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtSrinvloadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtSrinvloadIdPost", () => {
    const body: api.RESOURCEWTSRINVLOAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtSrinvloadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtSrinvloadPost", () => {
    const body: api.RESOURCEWTSRINVLOAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtSrinvloadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("StoreroomLocationDefinitionMXSTORELOCApi", () => {
  let instance: api.StoreroomLocationDefinitionMXSTORELOCApi
  beforeEach(function() {
    instance = new api.StoreroomLocationDefinitionMXSTORELOCApi(config)
  });

  test("osMxstorelocGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxstorelocGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxstorelocIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxstorelocIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxstorelocIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxstorelocIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxstorelocIdPost", () => {
    const body: api.RESOURCEMXSTORELOC = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxstorelocIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxstorelocPost", () => {
    const body: api.RESOURCEMXSTORELOC = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxstorelocPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SwKBTIdentityLinksToVariantsTAMITINTSWVARApi", () => {
  let instance: api.SwKBTIdentityLinksToVariantsTAMITINTSWVARApi
  beforeEach(function() {
    instance = new api.SwKBTIdentityLinksToVariantsTAMITINTSWVARApi(config)
  });

  test("osTamitintswvarGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswvarGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osTamitintswvarIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osTamitintswvarIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osTamitintswvarIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswvarIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osTamitintswvarIdPost", () => {
    const body: api.RESOURCETAMITINTSWVAR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswvarIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osTamitintswvarPost", () => {
    const body: api.RESOURCETAMITINTSWVAR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswvarPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SwKBTSoftwareCatalogTAMITINTSWApi", () => {
  let instance: api.SwKBTSoftwareCatalogTAMITINTSWApi
  beforeEach(function() {
    instance = new api.SwKBTSoftwareCatalogTAMITINTSWApi(config)
  });

  test("osTamitintswGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osTamitintswIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osTamitintswIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osTamitintswIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osTamitintswIdPost", () => {
    const body: api.RESOURCETAMITINTSW = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osTamitintswPost", () => {
    const body: api.RESOURCETAMITINTSW = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SwKBTSoftwareKBIdentityTAMITINTSWCATApi", () => {
  let instance: api.SwKBTSoftwareKBIdentityTAMITINTSWCATApi
  beforeEach(function() {
    instance = new api.SwKBTSoftwareKBIdentityTAMITINTSWCATApi(config)
  });

  test("osTamitintswcatGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswcatGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osTamitintswcatIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osTamitintswcatIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osTamitintswcatIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswcatIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osTamitintswcatIdPost", () => {
    const body: api.RESOURCETAMITINTSWCAT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswcatIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osTamitintswcatPost", () => {
    const body: api.RESOURCETAMITINTSWCAT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswcatPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SwKBTSoftwarePartNumbersTAMITINTSWPRTNUMApi", () => {
  let instance: api.SwKBTSoftwarePartNumbersTAMITINTSWPRTNUMApi
  beforeEach(function() {
    instance = new api.SwKBTSoftwarePartNumbersTAMITINTSWPRTNUMApi(config)
  });

  test("osTamitintswprtnumGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswprtnumGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osTamitintswprtnumIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osTamitintswprtnumIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osTamitintswprtnumIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswprtnumIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osTamitintswprtnumIdPost", () => {
    const body: api.RESOURCETAMITINTSWPRTNUM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswprtnumIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osTamitintswprtnumPost", () => {
    const body: api.RESOURCETAMITINTSWPRTNUM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswprtnumPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SwKBTSoftwareRelationshipsTAMITINTSWRELApi", () => {
  let instance: api.SwKBTSoftwareRelationshipsTAMITINTSWRELApi
  beforeEach(function() {
    instance = new api.SwKBTSoftwareRelationshipsTAMITINTSWRELApi(config)
  });

  test("osTamitintswrelGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswrelGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osTamitintswrelIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osTamitintswrelIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osTamitintswrelIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osTamitintswrelIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osTamitintswrelIdPost", () => {
    const body: api.RESOURCETAMITINTSWREL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswrelIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osTamitintswrelPost", () => {
    const body: api.RESOURCETAMITINTSWREL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osTamitintswrelPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("SystemAdminmodeApi", () => {
  let instance: api.SystemAdminmodeApi
  beforeEach(function() {
    instance = new api.SystemAdminmodeApi(config)
  });

  test("adminmodeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.adminmodeGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("adminmodePost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.adminmodePost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemAllqueriesApi", () => {
  let instance: api.SystemAllqueriesApi
  beforeEach(function() {
    instance = new api.SystemAllqueriesApi(config)
  });

  test("allqueriesOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.allqueriesOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemApimetaApi", () => {
  let instance: api.SystemApimetaApi
  beforeEach(function() {
    instance = new api.SystemApimetaApi(config)
  });

  test("apimetaOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.apimetaOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemApitokenApi", () => {
  let instance: api.SystemApitokenApi
  beforeEach(function() {
    instance = new api.SystemApitokenApi(config)
  });

  test("apitokenPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.apitokenPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemAppcfgApi", () => {
  let instance: api.SystemAppcfgApi
  beforeEach(function() {
    instance = new api.SystemAppcfgApi(config)
  });

  test("appcfgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.appcfgGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemAppsyscfgApi", () => {
  let instance: api.SystemAppsyscfgApi
  beforeEach(function() {
    instance = new api.SystemAppsyscfgApi(config)
  });

  test("appsyscfgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.appsyscfgGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemBamessagesApi", () => {
  let instance: api.SystemBamessagesApi
  beforeEach(function() {
    instance = new api.SystemBamessagesApi(config)
  });

  test("bamessagesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.bamessagesGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemBauitextApi", () => {
  let instance: api.SystemBauitextApi
  beforeEach(function() {
    instance = new api.SystemBauitextApi(config)
  });

  test("bauitextAppnameGet", () => {
    const appname: string = "appname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.bauitextAppnameGet(appname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("bauitextAppnamePropertyGet", () => {
    const appname: string = "appname_example"
    const property: string = "property_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.bauitextAppnamePropertyGet(appname, property, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("bauitextAppnamePropertyIdGet", () => {
    const appname: string = "appname_example"
    const property: string = "property_example"
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.bauitextAppnamePropertyIdGet(appname, property, id, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemBrowsemsghubApi", () => {
  let instance: api.SystemBrowsemsghubApi
  beforeEach(function() {
    instance = new api.SystemBrowsemsghubApi(config)
  });

  test("browsemsghubGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.browsemsghubGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemChangepasswordApi", () => {
  let instance: api.SystemChangepasswordApi
  beforeEach(function() {
    instance = new api.SystemChangepasswordApi(config)
  });

  test("changepasswordPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.changepasswordPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemConvertApi", () => {
  let instance: api.SystemConvertApi
  beforeEach(function() {
    instance = new api.SystemConvertApi(config)
  });

  test("convertGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.convertGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemCosdoclinkApi", () => {
  let instance: api.SystemCosdoclinkApi
  beforeEach(function() {
    instance = new api.SystemCosdoclinkApi(config)
  });

  test("cosdoclinkGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.cosdoclinkGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemDatetimeApi", () => {
  let instance: api.SystemDatetimeApi
  beforeEach(function() {
    instance = new api.SystemDatetimeApi(config)
  });

  test("datetimeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.datetimeGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemDevicelocationsheetApi", () => {
  let instance: api.SystemDevicelocationsheetApi
  beforeEach(function() {
    instance = new api.SystemDevicelocationsheetApi(config)
  });

  test("devicelocationsheetOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.devicelocationsheetOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemDevicesheetApi", () => {
  let instance: api.SystemDevicesheetApi
  beforeEach(function() {
    instance = new api.SystemDevicesheetApi(config)
  });

  test("devicesheetOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.devicesheetOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemDmApi", () => {
  let instance: api.SystemDmApi
  beforeEach(function() {
    instance = new api.SystemDmApi(config)
  });

  test("dmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.dmGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("dmPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.dmPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemDocstoreApi", () => {
  let instance: api.SystemDocstoreApi
  beforeEach(function() {
    instance = new api.SystemDocstoreApi(config)
  });

  test("docstoreGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.docstoreGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemDoczipApi", () => {
  let instance: api.SystemDoczipApi
  beforeEach(function() {
    instance = new api.SystemDoczipApi(config)
  });

  test("doczipGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.doczipGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemErrorApi", () => {
  let instance: api.SystemErrorApi
  beforeEach(function() {
    instance = new api.SystemErrorApi(config)
  });

  test("errorBmxidGet", () => {
    const bmxid: string = "bmxid_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.errorBmxidGet(bmxid, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemExtresApi", () => {
  let instance: api.SystemExtresApi
  beforeEach(function() {
    instance = new api.SystemExtresApi(config)
  });

  test("extresGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.extresGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("extresPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.extresPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemFileasyncApi", () => {
  let instance: api.SystemFileasyncApi
  beforeEach(function() {
    instance = new api.SystemFileasyncApi(config)
  });

  test("fileasyncOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.fileasyncOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("fileasyncOsnamePost", () => {
    const osname: string = "osname_example"
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.fileasyncOsnamePost(osname, body, xPublicUri, maxauth, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemFileimporterrfileApi", () => {
  let instance: api.SystemFileimporterrfileApi
  beforeEach(function() {
    instance = new api.SystemFileimporterrfileApi(config)
  });

  test("fileimporterrfileGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.fileimporterrfileGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemForgotpasswordApi", () => {
  let instance: api.SystemForgotpasswordApi
  beforeEach(function() {
    instance = new api.SystemForgotpasswordApi(config)
  });

  test("forgotpasswordPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.forgotpasswordPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemGlcompApi", () => {
  let instance: api.SystemGlcompApi
  beforeEach(function() {
    instance = new api.SystemGlcompApi(config)
  });

  test("glcompGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.glcompGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemGraphiteApi", () => {
  let instance: api.SystemGraphiteApi
  beforeEach(function() {
    instance = new api.SystemGraphiteApi(config)
  });

  test("graphiteGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.graphiteGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemGraphqlApi", () => {
  let instance: api.SystemGraphqlApi
  beforeEach(function() {
    instance = new api.SystemGraphqlApi(config)
  });

  test("graphqlPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.graphqlPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemGuestuserApi", () => {
  let instance: api.SystemGuestuserApi
  beforeEach(function() {
    instance = new api.SystemGuestuserApi(config)
  });

  test("guestuserPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.guestuserPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemImagesApi", () => {
  let instance: api.SystemImagesApi
  beforeEach(function() {
    instance = new api.SystemImagesApi(config)
  });

  test("imagesImglibidGet", () => {
    const imglibid: string = "imglibid_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.imagesImglibidGet(imglibid, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemInsightApi", () => {
  let instance: api.SystemInsightApi
  beforeEach(function() {
    instance = new api.SystemInsightApi(config)
  });

  test("insightGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.insightGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemJsonmboschemasApi", () => {
  let instance: api.SystemJsonmboschemasApi
  beforeEach(function() {
    instance = new api.SystemJsonmboschemasApi(config)
  });

  test("jsonmboschemasObjectnameGet", () => {
    const objectname: string = "objectname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.jsonmboschemasObjectnameGet(objectname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemJsonschemasApi", () => {
  let instance: api.SystemJsonschemasApi
  beforeEach(function() {
    instance = new api.SystemJsonschemasApi(config)
  });

  test("jsonschemasOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.jsonschemasOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemLicenseApi", () => {
  let instance: api.SystemLicenseApi
  beforeEach(function() {
    instance = new api.SystemLicenseApi(config)
  });

  test("licenseGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.licenseGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemLicenseinfoApi", () => {
  let instance: api.SystemLicenseinfoApi
  beforeEach(function() {
    instance = new api.SystemLicenseinfoApi(config)
  });

  test("licenseinfoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.licenseinfoGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemLogApi", () => {
  let instance: api.SystemLogApi
  beforeEach(function() {
    instance = new api.SystemLogApi(config)
  });

  test("logLogcmdGet", () => {
    const logcmd: string = "logcmd_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.logLogcmdGet(logcmd, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("logLogcmdPost", () => {
    const logcmd: string = "logcmd_example"
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.logLogcmdPost(logcmd, body, xPublicUri, maxauth, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemLoginApi", () => {
  let instance: api.SystemLoginApi
  beforeEach(function() {
    instance = new api.SystemLoginApi(config)
  });

  test("loginGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.loginGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("loginPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.loginPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemLogoutApi", () => {
  let instance: api.SystemLogoutApi
  beforeEach(function() {
    instance = new api.SystemLogoutApi(config)
  });

  test("logoutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.logoutGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("logoutPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.logoutPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemMapconfigurationApi", () => {
  let instance: api.SystemMapconfigurationApi
  beforeEach(function() {
    instance = new api.SystemMapconfigurationApi(config)
  });

  test("mapconfigurationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const format: string = "format_example"
    return expect(instance.mapconfigurationGet(lean, xPublicUri, maxauth, accept, apikey, format, {})).resolves.toBe(null)
  })
  test("mapconfigurationPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const format: string = "format_example"
    return expect(instance.mapconfigurationPost(body, xPublicUri, maxauth, contentType, apikey, lean, format, {})).resolves.toBe(null)
  })
})

describe("SystemMasddApi", () => {
  let instance: api.SystemMasddApi
  beforeEach(function() {
    instance = new api.SystemMasddApi(config)
  });

  test("masddGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.masddGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("masddPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.masddPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemMembersApi", () => {
  let instance: api.SystemMembersApi
  beforeEach(function() {
    instance = new api.SystemMembersApi(config)
  });

  test("membersGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.membersGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemMessagesApi", () => {
  let instance: api.SystemMessagesApi
  beforeEach(function() {
    instance = new api.SystemMessagesApi(config)
  });

  test("messagesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.messagesGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemMsghubApi", () => {
  let instance: api.SystemMsghubApi
  beforeEach(function() {
    instance = new api.SystemMsghubApi(config)
  });

  test("msghubGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.msghubGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("msghubPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.msghubPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemMxtourApi", () => {
  let instance: api.SystemMxtourApi
  beforeEach(function() {
    instance = new api.SystemMxtourApi(config)
  });

  test("mxtourGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.mxtourGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("mxtourPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.mxtourPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemMypersonApi", () => {
  let instance: api.SystemMypersonApi
  beforeEach(function() {
    instance = new api.SystemMypersonApi(config)
  });

  test("mypersonGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.mypersonGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("mypersonPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.mypersonPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemMyuserApi", () => {
  let instance: api.SystemMyuserApi
  beforeEach(function() {
    instance = new api.SystemMyuserApi(config)
  });

  test("myuserGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.myuserGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("myuserPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.myuserPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemNpsApi", () => {
  let instance: api.SystemNpsApi
  beforeEach(function() {
    instance = new api.SystemNpsApi(config)
  });

  test("npsPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.npsPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemOasApi", () => {
  let instance: api.SystemOasApi
  beforeEach(function() {
    instance = new api.SystemOasApi(config)
  });

  test("oasGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.oasGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemOsApi", () => {
  let instance: api.SystemOsApi
  beforeEach(function() {
    instance = new api.SystemOsApi(config)
  });

  test("osOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.osOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("osOsnamePost", () => {
    const osname: string = "osname_example"
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.osOsnamePost(osname, body, xPublicUri, maxauth, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionallglauthApi", () => {
  let instance: api.SystemPermissionallglauthApi
  beforeEach(function() {
    instance = new api.SystemPermissionallglauthApi(config)
  });

  test("permissionAllglauthGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionAllglauthGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionallowedappoptionsApi", () => {
  let instance: api.SystemPermissionallowedappoptionsApi
  beforeEach(function() {
    instance = new api.SystemPermissionallowedappoptionsApi(config)
  });

  test("permissionAllowedappoptionsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionAllowedappoptionsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionanyglauthApi", () => {
  let instance: api.SystemPermissionanyglauthApi
  beforeEach(function() {
    instance = new api.SystemPermissionanyglauthApi(config)
  });

  test("permissionAnyglauthGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionAnyglauthGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissioncheckosauthorizedApi", () => {
  let instance: api.SystemPermissioncheckosauthorizedApi
  beforeEach(function() {
    instance = new api.SystemPermissioncheckosauthorizedApi(config)
  });

  test("permissionCheckosauthorizedGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionCheckosauthorizedGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissioncollectionsApi", () => {
  let instance: api.SystemPermissioncollectionsApi
  beforeEach(function() {
    instance = new api.SystemPermissioncollectionsApi(config)
  });

  test("permissionCollectionsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionCollectionsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionlaborauthflagsApi", () => {
  let instance: api.SystemPermissionlaborauthflagsApi
  beforeEach(function() {
    instance = new api.SystemPermissionlaborauthflagsApi(config)
  });

  test("permissionLaborauthflagsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionLaborauthflagsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionlistallowedappsApi", () => {
  let instance: api.SystemPermissionlistallowedappsApi
  beforeEach(function() {
    instance = new api.SystemPermissionlistallowedappsApi(config)
  });

  test("permissionListallowedappsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const apps: string = "apps_example"
    const addgoto: boolean = true
    return expect(instance.permissionListallowedappsGet(lean, xPublicUri, maxauth, accept, apikey, apps, addgoto, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionorgdetailsApi", () => {
  let instance: api.SystemPermissionorgdetailsApi
  beforeEach(function() {
    instance = new api.SystemPermissionorgdetailsApi(config)
  });

  test("permissionOrgdetailsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionOrgdetailsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionorgsApi", () => {
  let instance: api.SystemPermissionorgsApi
  beforeEach(function() {
    instance = new api.SystemPermissionorgsApi(config)
  });

  test("permissionOrgsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionOrgsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionreadableorgsApi", () => {
  let instance: api.SystemPermissionreadableorgsApi
  beforeEach(function() {
    instance = new api.SystemPermissionreadableorgsApi(config)
  });

  test("permissionReadableorgsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionReadableorgsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionreadablesitesApi", () => {
  let instance: api.SystemPermissionreadablesitesApi
  beforeEach(function() {
    instance = new api.SystemPermissionreadablesitesApi(config)
  });

  test("permissionReadablesitesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionReadablesitesGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionsitedetailsApi", () => {
  let instance: api.SystemPermissionsitedetailsApi
  beforeEach(function() {
    instance = new api.SystemPermissionsitedetailsApi(config)
  });

  test("permissionSitedetailsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionSitedetailsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissionsitesApi", () => {
  let instance: api.SystemPermissionsitesApi
  beforeEach(function() {
    instance = new api.SystemPermissionsitesApi(config)
  });

  test("permissionSitesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionSitesGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPermissiontoleranceApi", () => {
  let instance: api.SystemPermissiontoleranceApi
  beforeEach(function() {
    instance = new api.SystemPermissiontoleranceApi(config)
  });

  test("permissionToleranceGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.permissionToleranceGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPingApi", () => {
  let instance: api.SystemPingApi
  beforeEach(function() {
    instance = new api.SystemPingApi(config)
  });

  test("pingGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.pingGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemProductsApi", () => {
  let instance: api.SystemProductsApi
  beforeEach(function() {
    instance = new api.SystemProductsApi(config)
  });

  test("productsGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.productsGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemPushnotifApi", () => {
  let instance: api.SystemPushnotifApi
  beforeEach(function() {
    instance = new api.SystemPushnotifApi(config)
  });

  test("pushnotifGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.pushnotifGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("pushnotifPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.pushnotifPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemPwdrulesApi", () => {
  let instance: api.SystemPwdrulesApi
  beforeEach(function() {
    instance = new api.SystemPwdrulesApi(config)
  });

  test("pwdrulesGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.pwdrulesGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemQuerymetaApi", () => {
  let instance: api.SystemQuerymetaApi
  beforeEach(function() {
    instance = new api.SystemQuerymetaApi(config)
  });

  test("querymetaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.querymetaGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("querymetaPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.querymetaPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemRefreshApi", () => {
  let instance: api.SystemRefreshApi
  beforeEach(function() {
    instance = new api.SystemRefreshApi(config)
  });

  test("refreshCachenameGet", () => {
    const cachename: string = "cachename_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.refreshCachenameGet(cachename, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemScriptApi", () => {
  let instance: api.SystemScriptApi
  beforeEach(function() {
    instance = new api.SystemScriptApi(config)
  });

  test("scriptScriptnameGet", () => {
    const scriptname: string = "scriptname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.scriptScriptnameGet(scriptname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("scriptScriptnamePost", () => {
    const scriptname: string = "scriptname_example"
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.scriptScriptnamePost(scriptname, body, xPublicUri, maxauth, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemServiceApi", () => {
  let instance: api.SystemServiceApi
  beforeEach(function() {
    instance = new api.SystemServiceApi(config)
  });

  test("serviceGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.serviceGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
  test("servicePost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.servicePost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemSetesigApi", () => {
  let instance: api.SystemSetesigApi
  beforeEach(function() {
    instance = new api.SystemSetesigApi(config)
  });

  test("setesigPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.setesigPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemShapesApi", () => {
  let instance: api.SystemShapesApi
  beforeEach(function() {
    instance = new api.SystemShapesApi(config)
  });

  test("shapesOsnameGet", () => {
    const osname: string = "osname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.shapesOsnameGet(osname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemSpApi", () => {
  let instance: api.SystemSpApi
  beforeEach(function() {
    instance = new api.SystemSpApi(config)
  });

  test("spGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.spGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemStreamApi", () => {
  let instance: api.SystemStreamApi
  beforeEach(function() {
    instance = new api.SystemStreamApi(config)
  });

  test("streamGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.streamGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemSysteminfoApi", () => {
  let instance: api.SystemSysteminfoApi
  beforeEach(function() {
    instance = new api.SystemSysteminfoApi(config)
  });

  test("systeminfoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.systeminfoGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemTenantusageApi", () => {
  let instance: api.SystemTenantusageApi
  beforeEach(function() {
    instance = new api.SystemTenantusageApi(config)
  });

  test("tenantusageGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.tenantusageGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemUitextApi", () => {
  let instance: api.SystemUitextApi
  beforeEach(function() {
    instance = new api.SystemUitextApi(config)
  });

  test("uitextAppnameGet", () => {
    const appname: string = "appname_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.uitextAppnameGet(appname, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("uitextAppnamePropertyGet", () => {
    const appname: string = "appname_example"
    const property: string = "property_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.uitextAppnamePropertyGet(appname, property, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
  test("uitextAppnamePropertyIdGet", () => {
    const appname: string = "appname_example"
    const property: string = "property_example"
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const apikey: string = "apikey_example"
    return expect(instance.uitextAppnamePropertyIdGet(appname, property, id, lean, xPublicUri, maxauth, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemValidatequeryApi", () => {
  let instance: api.SystemValidatequeryApi
  beforeEach(function() {
    instance = new api.SystemValidatequeryApi(config)
  });

  test("validatequeryPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.validatequeryPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemVerifyesigpassApi", () => {
  let instance: api.SystemVerifyesigpassApi
  beforeEach(function() {
    instance = new api.SystemVerifyesigpassApi(config)
  });

  test("verifyesigpassPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.verifyesigpassPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemVersionApi", () => {
  let instance: api.SystemVersionApi
  beforeEach(function() {
    instance = new api.SystemVersionApi(config)
  });

  test("versionGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.versionGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemWfApi", () => {
  let instance: api.SystemWfApi
  beforeEach(function() {
    instance = new api.SystemWfApi(config)
  });

  test("wfPost", () => {
    const body: any = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    return expect(instance.wfPost(body, xPublicUri, maxauth, contentType, apikey, lean, {})).resolves.toBe(null)
  })
})

describe("SystemWhoamiApi", () => {
  let instance: api.SystemWhoamiApi
  beforeEach(function() {
    instance = new api.SystemWhoamiApi(config)
  });

  test("whoamiGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.whoamiGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("SystemYamlApi", () => {
  let instance: api.SystemYamlApi
  beforeEach(function() {
    instance = new api.SystemYamlApi(config)
  });

  test("yamlGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    return expect(instance.yamlGet(lean, xPublicUri, maxauth, accept, apikey, {})).resolves.toBe(null)
  })
})

describe("TAMAssetDefinitionWTTAMApi", () => {
  let instance: api.TAMAssetDefinitionWTTAMApi
  beforeEach(function() {
    instance = new api.TAMAssetDefinitionWTTAMApi(config)
  });

  test("osWtTamGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtTamGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtTamIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtTamIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtTamIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtTamIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtTamIdPost", () => {
    const body: api.RESOURCEWTTAM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTamIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtTamPost", () => {
    const body: api.RESOURCEWTTAM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTamPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("TKServiceAddressMXTKSRVADApi", () => {
  let instance: api.TKServiceAddressMXTKSRVADApi
  beforeEach(function() {
    instance = new api.TKServiceAddressMXTKSRVADApi(config)
  });

  test("osMxtksrvadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxtksrvadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxtksrvadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxtksrvadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxtksrvadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxtksrvadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxtksrvadIdPost", () => {
    const body: api.RESOURCEMXTKSRVAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxtksrvadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxtksrvadPost", () => {
    const body: api.RESOURCEMXTKSRVAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxtksrvadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("TechnicalPublicationAssetStatusPLUSAMXTRASSETApi", () => {
  let instance: api.TechnicalPublicationAssetStatusPLUSAMXTRASSETApi
  beforeEach(function() {
    instance = new api.TechnicalPublicationAssetStatusPLUSAMXTRASSETApi(config)
  });

  test("osPlusamxtrassetGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxtrassetGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxtrassetIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxtrassetIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxtrassetIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxtrassetIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxtrassetIdPost", () => {
    const body: api.RESOURCEPLUSAMXTRASSET = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxtrassetIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxtrassetPost", () => {
    const body: api.RESOURCEPLUSAMXTRASSET = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxtrassetPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("TechnicalRecordsDefinitionPLUSAMXTRApi", () => {
  let instance: api.TechnicalRecordsDefinitionPLUSAMXTRApi
  beforeEach(function() {
    instance = new api.TechnicalRecordsDefinitionPLUSAMXTRApi(config)
  });

  test("osPlusamxtrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxtrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxtrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxtrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxtrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxtrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxtrIdPost", () => {
    const body: api.RESOURCEPLUSAMXTR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxtrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxtrPost", () => {
    const body: api.RESOURCEPLUSAMXTR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxtrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("TicketSOADefinitionWTTICKETSOAApi", () => {
  let instance: api.TicketSOADefinitionWTTICKETSOAApi
  beforeEach(function() {
    instance = new api.TicketSOADefinitionWTTICKETSOAApi(config)
  });

  test("osWtTicketSoaGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtTicketSoaGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtTicketSoaIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtTicketSoaIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtTicketSoaIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtTicketSoaIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtTicketSoaIdPost", () => {
    const body: api.RESOURCEWTTICKETSOA = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTicketSoaIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtTicketSoaPost", () => {
    const body: api.RESOURCEWTTICKETSOA = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTicketSoaPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ToolItemsDefinitionMXTOOLITEMApi", () => {
  let instance: api.ToolItemsDefinitionMXTOOLITEMApi
  beforeEach(function() {
    instance = new api.ToolItemsDefinitionMXTOOLITEMApi(config)
  });

  test("osMxtoolitemGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxtoolitemGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxtoolitemIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxtoolitemIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxtoolitemIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxtoolitemIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxtoolitemIdPost", () => {
    const body: api.RESOURCEMXTOOLITEM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxtoolitemIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxtoolitemPost", () => {
    const body: api.RESOURCEMXTOOLITEM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxtoolitemPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("UnitsOfMeasureMxLoaderMXLMEASUREUNITApi", () => {
  let instance: api.UnitsOfMeasureMxLoaderMXLMEASUREUNITApi
  beforeEach(function() {
    instance = new api.UnitsOfMeasureMxLoaderMXLMEASUREUNITApi(config)
  });

  test("osMxlMeasureunitGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlMeasureunitGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlMeasureunitIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlMeasureunitIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlMeasureunitIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlMeasureunitIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlMeasureunitIdPost", () => {
    const body: api.RESOURCEMXLMEASUREUNIT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlMeasureunitIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlMeasureunitPost", () => {
    const body: api.RESOURCEMXLMEASUREUNIT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlMeasureunitPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("UpdateOfInventoryTransactionWTMXINVTRANSSTGApi", () => {
  let instance: api.UpdateOfInventoryTransactionWTMXINVTRANSSTGApi
  beforeEach(function() {
    instance = new api.UpdateOfInventoryTransactionWTMXINVTRANSSTGApi(config)
  });

  test("osWtMxinvtransStgGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxinvtransStgGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxinvtransStgIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxinvtransStgIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxinvtransStgIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxinvtransStgIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxinvtransStgIdPost", () => {
    const body: api.RESOURCEWTMXINVTRANSSTG = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxinvtransStgIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxinvtransStgPost", () => {
    const body: api.RESOURCEWTMXINVTRANSSTG = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxinvtransStgPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("UsersSecurityMxLoaderMXLUSERGRPApi", () => {
  let instance: api.UsersSecurityMxLoaderMXLUSERGRPApi
  beforeEach(function() {
    instance = new api.UsersSecurityMxLoaderMXLUSERGRPApi(config)
  });

  test("osMxlUsergrpGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxlUsergrpGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxlUsergrpIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxlUsergrpIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxlUsergrpIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxlUsergrpIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxlUsergrpIdPost", () => {
    const body: api.RESOURCEMXLUSERGRP = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlUsergrpIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxlUsergrpPost", () => {
    const body: api.RESOURCEMXLUSERGRP = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxlUsergrpPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WFProcessDefinitionMXWFPROCESSApi", () => {
  let instance: api.WFProcessDefinitionMXWFPROCESSApi
  beforeEach(function() {
    instance = new api.WFProcessDefinitionMXWFPROCESSApi(config)
  });

  test("osMxwfprocessGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxwfprocessGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxwfprocessIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxwfprocessIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxwfprocessIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxwfprocessIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxwfprocessIdPost", () => {
    const body: api.RESOURCEMXWFPROCESS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwfprocessIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxwfprocessPost", () => {
    const body: api.RESOURCEMXWFPROCESS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwfprocessPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WMATAAssetMeterDefinitionWTASSETMTRApi", () => {
  let instance: api.WMATAAssetMeterDefinitionWTASSETMTRApi
  beforeEach(function() {
    instance = new api.WMATAAssetMeterDefinitionWTASSETMTRApi(config)
  });

  test("osWtAssetmtrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetmtrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtAssetmtrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtAssetmtrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtAssetmtrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtAssetmtrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtAssetmtrIdPost", () => {
    const body: api.RESOURCEWTASSETMTR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetmtrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtAssetmtrPost", () => {
    const body: api.RESOURCEWTASSETMTR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtAssetmtrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WMATAPurchaseOrderINFromFusionWTOCFMXPOApi", () => {
  let instance: api.WMATAPurchaseOrderINFromFusionWTOCFMXPOApi
  beforeEach(function() {
    instance = new api.WMATAPurchaseOrderINFromFusionWTOCFMXPOApi(config)
  });

  test("osWtOcfMxpoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxpoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxpoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtOcfMxpoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtOcfMxpoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtOcfMxpoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxpoIdPost", () => {
    const body: api.RESOURCEWTOCFMXPO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxpoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtOcfMxpoPost", () => {
    const body: api.RESOURCEWTOCFMXPO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtOcfMxpoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WMATAPurchaseOrderINFromPeopleSoftWTMXPOApi", () => {
  let instance: api.WMATAPurchaseOrderINFromPeopleSoftWTMXPOApi
  beforeEach(function() {
    instance = new api.WMATAPurchaseOrderINFromPeopleSoftWTMXPOApi(config)
  });

  test("osWtMxpoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxpoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxpoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxpoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxpoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxpoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxpoIdPost", () => {
    const body: api.RESOURCEWTMXPO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxpoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxpoPost", () => {
    const body: api.RESOURCEWTMXPO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxpoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WMATATRSTWorkOrderDefinitionWTTRSTWOApi", () => {
  let instance: api.WMATATRSTWorkOrderDefinitionWTTRSTWOApi
  beforeEach(function() {
    instance = new api.WMATATRSTWorkOrderDefinitionWTTRSTWOApi(config)
  });

  test("osWtTrstWoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtTrstWoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtTrstWoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtTrstWoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtTrstWoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtTrstWoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtTrstWoIdPost", () => {
    const body: api.RESOURCEWTTRSTWO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTrstWoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtTrstWoPost", () => {
    const body: api.RESOURCEWTTRSTWO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtTrstWoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WOServiceAddressMXWOSRVADApi", () => {
  let instance: api.WOServiceAddressMXWOSRVADApi
  beforeEach(function() {
    instance = new api.WOServiceAddressMXWOSRVADApi(config)
  });

  test("osMxwosrvadGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxwosrvadGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxwosrvadIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxwosrvadIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxwosrvadIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxwosrvadIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxwosrvadIdPost", () => {
    const body: api.RESOURCEMXWOSRVAD = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwosrvadIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxwosrvadPost", () => {
    const body: api.RESOURCEMXWOSRVAD = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwosrvadPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WTCLEVERSROUTWTCLEVERSROUTApi", () => {
  let instance: api.WTCLEVERSROUTWTCLEVERSROUTApi
  beforeEach(function() {
    instance = new api.WTCLEVERSROUTWTCLEVERSROUTApi(config)
  });

  test("osWtCleverSroutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtCleverSroutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtCleverSroutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtCleverSroutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtCleverSroutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtCleverSroutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtCleverSroutIdPost", () => {
    const body: api.RESOURCEWTCLEVERSROUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCleverSroutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtCleverSroutPost", () => {
    const body: api.RESOURCEWTCLEVERSROUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtCleverSroutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WTMXINVVENDORWTMXINVVENDORApi", () => {
  let instance: api.WTMXINVVENDORWTMXINVVENDORApi
  beforeEach(function() {
    instance = new api.WTMXINVVENDORWTMXINVVENDORApi(config)
  });

  test("osWtMxinvvendorGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtMxinvvendorGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtMxinvvendorIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtMxinvvendorIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtMxinvvendorIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtMxinvvendorIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtMxinvvendorIdPost", () => {
    const body: api.RESOURCEWTMXINVVENDOR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxinvvendorIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtMxinvvendorPost", () => {
    const body: api.RESOURCEWTMXINVVENDOR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtMxinvvendorPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WarehouseOrderPickingDefinitionWTWHMOUTApi", () => {
  let instance: api.WarehouseOrderPickingDefinitionWTWHMOUTApi
  beforeEach(function() {
    instance = new api.WarehouseOrderPickingDefinitionWTWHMOUTApi(config)
  });

  test("osWtWhmOutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWhmOutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWhmOutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWhmOutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWhmOutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWhmOutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWhmOutIdPost", () => {
    const body: api.RESOURCEWTWHMOUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhmOutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWhmOutPost", () => {
    const body: api.RESOURCEWTWHMOUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhmOutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WarehouseOrderPickingMovementObjectWTWHMApi", () => {
  let instance: api.WarehouseOrderPickingMovementObjectWTWHMApi
  beforeEach(function() {
    instance = new api.WarehouseOrderPickingMovementObjectWTWHMApi(config)
  });

  test("osWtWhmGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWhmGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWhmIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWhmIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWhmIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWhmIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWhmIdPost", () => {
    const body: api.RESOURCEWTWHM = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhmIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWhmPost", () => {
    const body: api.RESOURCEWTWHM = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhmPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WarehouseReceiptsDefinitionWTWHRApi", () => {
  let instance: api.WarehouseReceiptsDefinitionWTWHRApi
  beforeEach(function() {
    instance = new api.WarehouseReceiptsDefinitionWTWHRApi(config)
  });

  test("osWtWhrGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWhrGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWhrIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWhrIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWhrIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWhrIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWhrIdPost", () => {
    const body: api.RESOURCEWTWHR = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhrIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWhrPost", () => {
    const body: api.RESOURCEWTWHR = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhrPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WarehouseReceiptsDefinitionWTWHROUTApi", () => {
  let instance: api.WarehouseReceiptsDefinitionWTWHROUTApi
  beforeEach(function() {
    instance = new api.WarehouseReceiptsDefinitionWTWHROUTApi(config)
  });

  test("osWtWhrOutGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWhrOutGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWhrOutIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWhrOutIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWhrOutIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWhrOutIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWhrOutIdPost", () => {
    const body: api.RESOURCEWTWHROUT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhrOutIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWhrOutPost", () => {
    const body: api.RESOURCEWTWHROUT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWhrOutPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WeatherAlertsMXWEATHERALERTApi", () => {
  let instance: api.WeatherAlertsMXWEATHERALERTApi
  beforeEach(function() {
    instance = new api.WeatherAlertsMXWEATHERALERTApi(config)
  });

  test("osMxweatheralertGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxweatheralertGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxweatheralertIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxweatheralertIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxweatheralertIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxweatheralertIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxweatheralertIdPost", () => {
    const body: api.RESOURCEMXWEATHERALERT = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxweatheralertIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxweatheralertPost", () => {
    const body: api.RESOURCEMXWEATHERALERT = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxweatheralertPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderDefinitionMHWOApi", () => {
  let instance: api.WorkOrderDefinitionMHWOApi
  beforeEach(function() {
    instance = new api.WorkOrderDefinitionMHWOApi(config)
  });

  test("osMhwoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMhwoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMhwoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMhwoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMhwoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMhwoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMhwoIdPost", () => {
    const body: api.RESOURCEMHWO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhwoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMhwoPost", () => {
    const body: api.RESOURCEMHWO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMhwoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderDefinitionMXWOApi", () => {
  let instance: api.WorkOrderDefinitionMXWOApi
  beforeEach(function() {
    instance = new api.WorkOrderDefinitionMXWOApi(config)
  });

  test("osMxwoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxwoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxwoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxwoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxwoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxwoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxwoIdPost", () => {
    const body: api.RESOURCEMXWO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxwoPost", () => {
    const body: api.RESOURCEMXWO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderDefinitionPLUSAMXWODETAILApi", () => {
  let instance: api.WorkOrderDefinitionPLUSAMXWODETAILApi
  beforeEach(function() {
    instance = new api.WorkOrderDefinitionPLUSAMXWODETAILApi(config)
  });

  test("osPlusamxwodetailGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxwodetailGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxwodetailIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxwodetailIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxwodetailIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxwodetailIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxwodetailIdPost", () => {
    const body: api.RESOURCEPLUSAMXWODETAIL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxwodetailIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxwodetailPost", () => {
    const body: api.RESOURCEPLUSAMXWODETAIL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxwodetailPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderDefinitionToLoadDataWTWOApi", () => {
  let instance: api.WorkOrderDefinitionToLoadDataWTWOApi
  beforeEach(function() {
    instance = new api.WorkOrderDefinitionToLoadDataWTWOApi(config)
  });

  test("osWtWoGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osWtWoGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osWtWoIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osWtWoIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osWtWoIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osWtWoIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osWtWoIdPost", () => {
    const body: api.RESOURCEWTWO = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWoIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osWtWoPost", () => {
    const body: api.RESOURCEWTWO = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osWtWoPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderHierarchyDefinitionMXWOHIERApi", () => {
  let instance: api.WorkOrderHierarchyDefinitionMXWOHIERApi
  beforeEach(function() {
    instance = new api.WorkOrderHierarchyDefinitionMXWOHIERApi(config)
  });

  test("osMxwohierGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxwohierGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxwohierIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxwohierIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxwohierIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxwohierIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxwohierIdPost", () => {
    const body: api.RESOURCEMXWOHIER = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwohierIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxwohierPost", () => {
    const body: api.RESOURCEMXWOHIER = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwohierPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderPredecessorMXWOTASKRELATIONApi", () => {
  let instance: api.WorkOrderPredecessorMXWOTASKRELATIONApi
  beforeEach(function() {
    instance = new api.WorkOrderPredecessorMXWOTASKRELATIONApi(config)
  });

  test("osMxwotaskrelationGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxwotaskrelationGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxwotaskrelationIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxwotaskrelationIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxwotaskrelationIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxwotaskrelationIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxwotaskrelationIdPost", () => {
    const body: api.RESOURCEMXWOTASKRELATION = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwotaskrelationIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxwotaskrelationPost", () => {
    const body: api.RESOURCEMXWOTASKRELATION = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwotaskrelationPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkOrderWithPlansAndReservationsDefinitionMXWODETAILApi", () => {
  let instance: api.WorkOrderWithPlansAndReservationsDefinitionMXWODETAILApi
  beforeEach(function() {
    instance = new api.WorkOrderWithPlansAndReservationsDefinitionMXWODETAILApi(config)
  });

  test("osMxwodetailGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxwodetailGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxwodetailIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxwodetailIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxwodetailIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxwodetailIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxwodetailIdPost", () => {
    const body: api.RESOURCEMXWODETAIL = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwodetailIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxwodetailPost", () => {
    const body: api.RESOURCEMXWODETAIL = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxwodetailPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkPackageDefinitionPLUSAMXWRKPCKApi", () => {
  let instance: api.WorkPackageDefinitionPLUSAMXWRKPCKApi
  beforeEach(function() {
    instance = new api.WorkPackageDefinitionPLUSAMXWRKPCKApi(config)
  });

  test("osPlusamxwrkpckGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxwrkpckGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxwrkpckIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxwrkpckIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxwrkpckIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxwrkpckIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxwrkpckIdPost", () => {
    const body: api.RESOURCEPLUSAMXWRKPCK = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxwrkpckIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxwrkpckPost", () => {
    const body: api.RESOURCEPLUSAMXWRKPCK = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxwrkpckPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkTypeMXAPIWORKTYPEApi", () => {
  let instance: api.WorkTypeMXAPIWORKTYPEApi
  beforeEach(function() {
    instance = new api.WorkTypeMXAPIWORKTYPEApi(config)
  });

  test("osMxapiworktypeGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworktypeGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiworktypeIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiworktypeIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiworktypeIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiworktypeIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiworktypeIdPost", () => {
    const body: api.RESOURCEMXAPIWORKTYPE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworktypeIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiworktypePost", () => {
    const body: api.RESOURCEMXAPIWORKTYPE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiworktypePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("WorkflowProcessDefinitionMXAPIWFPROCESSApi", () => {
  let instance: api.WorkflowProcessDefinitionMXAPIWFPROCESSApi
  beforeEach(function() {
    instance = new api.WorkflowProcessDefinitionMXAPIWFPROCESSApi(config)
  });

  test("osMxapiwfprocessGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwfprocessGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osMxapiwfprocessIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osMxapiwfprocessIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osMxapiwfprocessIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osMxapiwfprocessIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osMxapiwfprocessIdPost", () => {
    const body: api.RESOURCEMXAPIWFPROCESS = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwfprocessIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osMxapiwfprocessPost", () => {
    const body: api.RESOURCEMXAPIWFPROCESS = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osMxapiwfprocessPost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

describe("ZonesPLUSAMXZONEApi", () => {
  let instance: api.ZonesPLUSAMXZONEApi
  beforeEach(function() {
    instance = new api.ZonesPLUSAMXZONEApi(config)
  });

  test("osPlusamxzoneGet", () => {
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcWhere: string = "oslcWhere_example"
    const oslcSelect: string = "oslcSelect_example"
    const oslcOrderBy: string = "oslcOrderBy_example"
    const oslcPageSize: number = 56
    const oslcPaging: boolean = true
    const oslcSearchTerms: string = "oslcSearchTerms_example"
    const stablepaging: number = 56
    const collectioncount: number = 56
    const opmodeor: number = 56
    const accept: string = "accept_example"
    const gbcols: string = "gbcols_example"
    const gbsortby: string = "gbsortby_example"
    const gbrange: string = "gbrange_example"
    const apikey: string = "apikey_example"
    const savedQuery: string = "savedQuery_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxzoneGet(lean, xPublicUri, maxauth, oslcWhere, oslcSelect, oslcOrderBy, oslcPageSize, oslcPaging, oslcSearchTerms, stablepaging, collectioncount, opmodeor, accept, gbcols, gbsortby, gbrange, apikey, savedQuery, action, {})).resolves.toBe(null)
  })
  test("osPlusamxzoneIdDelete", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const transactionid: string = "transactionid_example"
    const xAllowEvents: number = 56
    return expect(instance.osPlusamxzoneIdDelete(id, lean, xPublicUri, maxauth, transactionid, xAllowEvents, {})).resolves.toBe(null)
  })
  test("osPlusamxzoneIdGet", () => {
    const id: string = "id_example"
    const lean: number = 56
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const oslcProperties: string = "oslcProperties_example"
    const accept: string = "accept_example"
    const apikey: string = "apikey_example"
    const action: string = "action_example"
    return expect(instance.osPlusamxzoneIdGet(id, lean, xPublicUri, maxauth, oslcProperties, accept, apikey, action, {})).resolves.toBe(null)
  })
  test("osPlusamxzoneIdPost", () => {
    const body: api.RESOURCEPLUSAMXZONE = undefined
    const id: string = "id_example"
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const patchtype: string = "patchtype_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxzoneIdPost(body, id, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, patchtype, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
  test("osPlusamxzonePost", () => {
    const body: api.RESOURCEPLUSAMXZONE = undefined
    const xPublicUri: string = "xPublicUri_example"
    const maxauth: string = "maxauth_example"
    const xMethodOverride: string = "xMethodOverride_example"
    const xAllowEvents: number = 56
    const transactionid: string = "transactionid_example"
    const properties: string = "properties_example"
    const contentType: string = "contentType_example"
    const apikey: string = "apikey_example"
    const lean: number = 56
    const action: string = "action_example"
    return expect(instance.osPlusamxzonePost(body, xPublicUri, maxauth, xMethodOverride, xAllowEvents, transactionid, properties, contentType, apikey, lean, action, {})).resolves.toBe(null)
  })
})

